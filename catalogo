<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Aline Menezes Beauty - Catálogo Interativo</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=Dancing+Script:wght@400;500;600;700&display=swap');
        
        body {
            box-sizing: border-box;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 25%, #f093fb 50%, #f5576c 75%, #4facfe 100%);
            background-attachment: fixed;
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            min-height: 100vh;
            color: #2d3748;
        }
        
        body.has-custom-bg {
            animation: none;
        }
        
        @keyframes gradientFlow {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        /* Overlay para melhorar legibilidade com imagem de fundo */
        .bg-overlay {
            background: rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(2px);
        }
        
        /* Efeito de partículas flutuantes */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 25% 75%, rgba(255, 255, 255, 0.1) 0%, transparent 40%),
                radial-gradient(circle at 75% 25%, rgba(255, 255, 255, 0.08) 0%, transparent 40%),
                radial-gradient(circle at 50% 50%, rgba(255, 255, 255, 0.05) 0%, transparent 50%);
            z-index: -1;
            animation: floatingParticles 18s ease-in-out infinite;
        }
        
        @keyframes floatingParticles {
            0%, 100% { transform: translateX(0) translateY(0) rotate(0deg); }
            33% { transform: translateX(-15px) translateY(-8px) rotate(120deg); }
            66% { transform: translateX(15px) translateY(8px) rotate(240deg); }
        }
        
        /* Tipografia melhorada */
        h1, h2, h3, h4, h5, h6 {
            font-family: 'Inter', sans-serif;
            font-weight: 700;
            letter-spacing: -0.025em;
        }
        
        /* Header específico com fonte minimalista */
        header h1 {
            font-family: 'Inter', sans-serif;
            font-weight: 800;
            letter-spacing: -0.02em;
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
            animation: modalFadeIn 0.3s ease-out;
        }
        
        .modal.active {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        
        @keyframes modalFadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        .modal > div {
            animation: modalSlideIn 0.4s ease-out;
            max-height: 90vh;
            overflow-y: auto;
        }
        
        @keyframes modalSlideIn {
            from { 
                opacity: 0;
                transform: translateY(-50px) scale(0.9);
            }
            to { 
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }
        
        .service-card {
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            background: rgba(255, 255, 255, 0.98);
            backdrop-filter: blur(25px);
            border: 2px solid rgba(255, 255, 255, 0.3);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
        }
        
        .service-card:hover {
            transform: translateY(-12px) scale(1.03);
            box-shadow: 
                0 30px 60px rgba(233, 30, 99, 0.2),
                0 0 0 2px rgba(233, 30, 99, 0.3);
            background: rgba(255, 255, 255, 1);
            border-color: rgba(233, 30, 99, 0.4);
        }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            max-width: 420px;
            padding: 20px 24px;
            border-radius: 16px;
            color: white;
            font-weight: 600;
            font-size: 14px;
            z-index: 3000;
            transform: translateX(120%);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 
                0 20px 40px rgba(0, 0, 0, 0.15),
                0 0 0 1px rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
        }
        
        .notification.show {
            transform: translateX(0);
        }
        
        .notification.success {
            background: linear-gradient(135deg, #4caf50 0%, #2e7d32 100%);
            border-left: 5px solid #81c784;
        }
        
        .notification.error {
            background: linear-gradient(135deg, #f44336 0%, #c62828 100%);
            border-left: 5px solid #e57373;
        }
        
        .notification.info {
            background: linear-gradient(135deg, #2196f3 0%, #1565c0 100%);
            border-left: 5px solid #64b5f6;
        }
        
        .notification.warning {
            background: linear-gradient(135deg, #ff9800 0%, #e65100 100%);
            border-left: 5px solid #ffb74d;
        }
        
        /* Glassmorphism da versão 40 */
        .glass-container {
            background: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(30px);
            border: 2px solid rgba(255, 255, 255, 0.25);
            box-shadow: 
                0 12px 40px rgba(0, 0, 0, 0.15),
                inset 0 1px 0 rgba(255, 255, 255, 0.3);
        }
        
        /* Botões da versão 40 */
        .btn-primary {
            background: linear-gradient(135deg, #e91e63 0%, #9c27b0 100%);
            border: none;
            color: white;
            font-weight: 700;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(233, 30, 99, 0.3);
        }
        
        .btn-primary::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            transition: left 0.6s ease;
        }
        
        .btn-primary:hover::before {
            left: 100%;
        }
        
        .btn-primary:hover {
            transform: translateY(-3px) scale(1.02);
            box-shadow: 0 15px 35px rgba(233, 30, 99, 0.5);
            background: linear-gradient(135deg, #f06292 0%, #ba68c8 100%);
        }
        
        /* Animações de entrada */
        .fade-in {
            animation: fadeIn 0.6s ease-out;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .slide-in-left {
            animation: slideInLeft 0.6s ease-out;
        }
        
        @keyframes slideInLeft {
            from { opacity: 0; transform: translateX(-30px); }
            to { opacity: 1; transform: translateX(0); }
        }
        
        .slide-in-right {
            animation: slideInRight 0.6s ease-out;
        }
        
        @keyframes slideInRight {
            from { opacity: 0; transform: translateX(30px); }
            to { opacity: 1; transform: translateX(0); }
        }
        
        /* Scrollbar da versão 40 */
        ::-webkit-scrollbar {
            width: 10px;
        }
        
        ::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.15);
            border-radius: 6px;
        }
        
        ::-webkit-scrollbar-thumb {
            background: linear-gradient(135deg, #e91e63, #9c27b0);
            border-radius: 6px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: linear-gradient(135deg, #f06292, #ba68c8);
        }
        
        /* Inputs da versão 40 */
        .form-input {
            background: rgba(255, 255, 255, 0.95);
            border: 2px solid rgba(255, 255, 255, 0.4);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            font-weight: 500;
        }
        
        .form-input:focus {
            background: rgba(255, 255, 255, 1);
            border-color: #e91e63;
            box-shadow: 0 0 0 4px rgba(233, 30, 99, 0.15);
            transform: translateY(-1px);
        }
        
        /* Loading spinner */
        .loading-spinner {
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s ease-in-out infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <!-- Header - Versão 165 Original -->
    <header class="bg-white shadow-2xl sticky top-0 z-50 fade-in">
        <div class="container mx-auto px-6 py-4">
            <div class="flex items-center justify-between">
                <!-- Botões de Contato à Esquerda -->
                <div class="flex flex-col gap-2 slide-in-left">
                    <a href="https://wa.me/5549998200000?text=Olá! Vim através do catálogo online e gostaria de mais informações sobre os serviços." target="_blank" rel="noopener noreferrer" class="bg-green-500 text-white px-3 py-2 rounded-lg text-xs font-light tracking-wide hover:bg-green-600 hover:scale-105 transition-all duration-300 shadow-lg flex items-center gap-2">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.890-5.335 11.893-11.893A11.821 11.821 0 0020.465 3.516"/>
                        </svg>
                        WHATSAPP (49) 99820-0000
                    </a>
                    <a href="https://instagram.com/alinemenezes.beauty" target="_blank" rel="noopener noreferrer" class="bg-gradient-to-r from-pink-500 to-red-500 text-white px-2.5 py-2 rounded-lg text-xs font-light tracking-wide hover:from-pink-600 hover:to-red-600 hover:scale-105 transition-all duration-300 shadow-lg flex items-center gap-2">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"/>
                        </svg>
                        @alinemenezes.beauty
                    </a>
                </div>
                
                <!-- Título Principal e Botões à Direita -->
                <div class="flex flex-col items-center gap-2 slide-in-right">
                    <div class="text-center">
                        <h2 class="text-3xl font-light text-black tracking-wide">
                            ALINE MENEZES BEAUTY
                        </h2>
                        <p class="text-xs font-light text-gray-500 tracking-wide text-center mt-1 mb-1" style="font-family: 'Inter', sans-serif;">
                            ESTÚDIO DE BELEZA E CURSOS
                        </p>
                    </div>
                    
                    <div class="flex gap-2">
                        <button onclick="showLocationModal()" class="bg-black text-white px-3 py-2 rounded-lg text-xs font-light tracking-wide hover:bg-gray-800 hover:scale-105 transition-all duration-300 shadow-lg">
                            📍 COMO CHEGAR
                        </button>
                        <button onclick="toggleAccess()" id="accessBtn" class="bg-gradient-to-r from-yellow-500 to-yellow-600 text-white px-3 py-2 rounded-lg text-xs font-light tracking-wide hover:from-yellow-600 hover:to-yellow-700 hover:scale-105 transition-all duration-300 shadow-lg animate-pulse">
                            ENTRAR
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- Public Catalog -->
    <div id="publicCatalog" class="container mx-auto px-6 py-8">
        <div class="glass-container rounded-3xl p-8 shadow-2xl fade-in">
            <!-- Welcome Section da Versão 165 -->
            <div class="glass-container rounded-2xl shadow-xl p-4 mb-8 text-center slide-in-left overflow-hidden">
                <div class="mb-3">
                    <h2 class="text-xl font-light text-magenta-500 mb-2 drop-shadow-xl tracking-wide">
                        BEM-VINDA AO NOSSO UNIVERSO DE BELEZA!!!
                    </h2>
                </div>
                
                <!-- Services Title -->
                <div class="text-center mb-3 slide-in-left">
                    <h2 class="text-2xl font-light text-black tracking-widest uppercase">CONHEÇA NOSSOS SERVIÇOS:</h2>
                </div>

                <!-- Filter Buttons da Versão 165 -->
                <div class="flex justify-center gap-3 mb-4 slide-in-right">
                    <button onclick="filterServices('cilios')" class="filter-btn bg-black/50 backdrop-blur-sm text-white px-4 py-2 rounded-xl text-sm font-light tracking-widest hover:scale-105 transition-all duration-300 shadow-lg uppercase">
                        CÍLIOS
                    </button>
                    <button onclick="filterServices('sobrancelha')" class="filter-btn bg-black/50 backdrop-blur-sm text-white px-4 py-2 rounded-xl text-sm font-light tracking-widest hover:scale-105 transition-all duration-300 shadow-lg uppercase">
                        SOBRANCELHAS
                    </button>
                    <button onclick="toggleMicropigmentacao()" id="micropigmentacaoBtn" class="filter-btn bg-black/50 backdrop-blur-sm text-white px-4 py-2 rounded-xl text-sm font-light tracking-widest hover:scale-105 transition-all duration-300 shadow-lg uppercase">
                        MICROPIGMENTAÇÃO ▼
                    </button>
                </div>
            </div>

            <!-- Micropigmentação Subcategories -->
            <div id="micropigmentacaoSubcategories" class="hidden mb-8 slide-in-right">
                <div class="text-center mb-4">
                    <h3 class="text-lg font-light text-white tracking-widest uppercase">Escolha a área:</h3>
                </div>
                <div class="flex justify-center gap-3">
                    <button onclick="filterServices('micropigmentacao-sobrancelhas')" class="subcategory-btn bg-gradient-to-r from-pink-500/70 to-purple-500/70 backdrop-blur-sm text-white px-4 py-2 rounded-xl text-sm font-light tracking-widest hover:scale-105 transition-all duration-300 shadow-lg uppercase">
                        SOBRANCELHAS
                    </button>
                    <button onclick="filterServices('micropigmentacao-olhos')" class="subcategory-btn bg-gradient-to-r from-pink-500/70 to-purple-500/70 backdrop-blur-sm text-white px-4 py-2 rounded-xl text-sm font-light tracking-widest hover:scale-105 transition-all duration-300 shadow-lg uppercase">
                        OLHOS
                    </button>
                    <button onclick="filterServices('micropigmentacao-labios')" class="subcategory-btn bg-gradient-to-r from-pink-500/70 to-purple-500/70 backdrop-blur-sm text-white px-4 py-2 rounded-xl text-sm font-light tracking-widest hover:scale-105 transition-all duration-300 shadow-lg uppercase">
                        LÁBIOS
                    </button>
                </div>
            </div>

            <!-- Services Grid -->
            <div id="servicesGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                <!-- Services will be loaded here -->
            </div>

            <!-- Seção de Informações Adicionais - Versão 165 Original -->
            <div class="glass-container rounded-3xl shadow-xl p-8 mt-12 text-center slide-in-left">
                <div class="mb-6">
                    <p class="text-black text-base max-w-2xl mx-auto leading-relaxed font-light tracking-widest mb-6">✨ COMPROMISSO COM A SUA BELEZA E BEM-ESTAR! ✨</p>
                    
                    <div class="flex flex-wrap justify-center gap-4 mb-4">
                        <button onclick="showBookingModal()" class="bg-gradient-to-r from-pink-500 to-red-500 text-white px-6 py-2 rounded-xl text-base font-light tracking-widest hover:scale-105 transition-all duration-300 shadow-xl">
                            <span class="text-xl mr-2">📅</span>
                            QUERO AGENDAR!
                        </button>
                        <button onclick="shareWhatsApp()" class="bg-gradient-to-r from-green-400 to-blue-500 text-white px-6 py-2 rounded-xl text-base font-light tracking-widest hover:scale-105 transition-all duration-300 shadow-xl">
                            <span class="text-xl mr-2">📱</span>
                            COMPARTILHAR CATÁLOGO
                        </button>
                    </div>
                    
                    <p class="text-black text-base max-w-2xl mx-auto leading-relaxed font-light tracking-widest mb-6">✨ COMPROMISSO COM A SUA BELEZA E BEM-ESTAR! ✨</p>
                </div>
                
                <!-- Estatísticas Integradas -->
                <div class="flex justify-center gap-6 mb-8">
                    <div class="bg-gradient-to-r from-pink-500/30 to-purple-500/30 backdrop-blur-sm rounded-xl px-6 py-4 text-center border border-pink-300/30 shadow-lg">
                        <div class="text-2xl font-bold text-black tracking-widest">1000+</div>
                        <div class="text-black font-light tracking-widest text-sm">CLIENTES SATISFEITAS</div>
                    </div>
                    <div class="bg-gradient-to-r from-yellow-500/30 to-orange-500/30 backdrop-blur-sm rounded-xl px-6 py-4 text-center border border-yellow-300/30 shadow-lg">
                        <div class="text-2xl font-bold text-black tracking-widest">5⭐</div>
                        <div class="text-black font-light tracking-widest text-sm">AVALIAÇÃO MÉDIA</div>
                    </div>
                    <div class="bg-gradient-to-r from-green-500/30 to-emerald-500/30 backdrop-blur-sm rounded-xl px-6 py-4 text-center border border-green-300/30 shadow-lg">
                        <div class="text-2xl font-bold text-black tracking-widest">100%</div>
                        <div class="text-black font-light tracking-widest text-sm">SATISFAÇÃO GARANTIDA</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Access Page (Login) -->
    <div id="accessPage" class="container mx-auto px-6 py-8 hidden">
        <div class="max-w-md mx-auto glass-container rounded-2xl shadow-xl p-8">
            <div class="text-center mb-6">
                <button onclick="showPublicCatalog()" class="text-pink-300 hover:text-pink-200 text-sm mb-4">← Voltar ao Catálogo</button>
                <h2 class="text-2xl font-bold text-white">Acesso ao Sistema</h2>
            </div>
            
            <div class="flex gap-4 mb-6">
                <button onclick="showClientLogin()" id="clientLoginBtn" class="flex-1 btn-primary py-3 rounded-lg font-semibold transition-colors">
                    CLIENTE
                </button>
                <button onclick="showProfessionalLogin()" id="professionalLoginBtn" class="flex-1 glass-container text-white py-3 rounded-lg font-semibold hover:bg-white/20 transition-colors">
                    PROFISSIONAL
                </button>
            </div>

            <!-- Client Login Form -->
            <div id="clientLoginForm">
                <form onsubmit="loginClient(event)" class="space-y-4">
                    <div>
                        <label class="block text-white font-semibold mb-2">CPF</label>
                        <input type="text" id="clientLoginCPF" required placeholder="000.000.000-00" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                    </div>
                    <div>
                        <label class="block text-white font-semibold mb-2">WhatsApp</label>
                        <input type="tel" id="clientLoginPhone" required placeholder="(00) 00000-0000" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                    </div>
                    <button type="submit" class="w-full btn-primary py-3 rounded-lg font-semibold transition-colors">
                        Entrar
                    </button>
                    <div class="grid grid-cols-2 gap-2">
                        <button type="button" onclick="quickClientLogin()" class="bg-blue-500 text-white py-2 rounded-lg font-semibold hover:bg-blue-600 transition-colors text-sm">
                            🚀 Login Rápido
                        </button>
                        <button type="button" onclick="forceClientLogin()" class="bg-green-500 text-white py-2 rounded-lg font-semibold hover:bg-green-600 transition-colors text-sm">
                            ⚡ Entrar Direto
                        </button>
                    </div>
                </form>
                <p class="text-center text-sm text-white/70 mt-4">
                    Não tem cadastro? <button onclick="showBookingModal()" class="text-pink-300 hover:underline">Cadastre-se aqui</button>
                </p>
            </div>

            <!-- Professional Login Form -->
            <div id="professionalLoginForm" class="hidden">
                <form onsubmit="loginProfessional(event)" class="space-y-4">
                    <div>
                        <label class="block text-white font-semibold mb-2">Email</label>
                        <input type="text" id="professionalEmail" required placeholder="admin ou seu@email.com" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                    </div>
                    <div>
                        <label class="block text-white font-semibold mb-2">Senha</label>
                        <input type="password" id="professionalPassword" required class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                    </div>
                    <button type="submit" class="w-full glass-container text-white py-3 rounded-lg font-semibold hover:bg-white/20 transition-colors">
                        Entrar
                    </button>
                    <div class="grid grid-cols-2 gap-2">
                        <button type="button" onclick="quickProfessionalLogin()" class="bg-green-500 text-white py-2 rounded-lg font-semibold hover:bg-green-600 transition-colors text-sm">
                            🚀 Login Admin
                        </button>
                        <button type="button" onclick="forceProfessionalLogin()" class="bg-purple-500 text-white py-2 rounded-lg font-semibold hover:bg-purple-600 transition-colors text-sm">
                            ⚡ Entrar Direto
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Client Dashboard -->
    <div id="clientDashboard" class="container mx-auto px-6 py-8 hidden">
        <div class="glass-container rounded-2xl shadow-xl p-8">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold text-white">Minha Área - Cliente</h2>
                <button onclick="logout()" class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors">
                    Sair
                </button>
            </div>

            <div class="grid md:grid-cols-3 gap-6 mb-8">
                <button onclick="showClientAppointments()" class="bg-blue-500 text-white p-6 rounded-lg hover:bg-blue-600 transition-colors">
                    <div class="text-3xl mb-2">📅</div>
                    <div class="font-semibold">Meus Agendamentos</div>
                </button>
                <button onclick="showClientHistory()" class="bg-green-500 text-white p-6 rounded-lg hover:bg-green-600 transition-colors">
                    <div class="text-3xl mb-2">📋</div>
                    <div class="font-semibold">Histórico</div>
                </button>
                <button onclick="showMainContent()" class="bg-pink-500 text-white p-6 rounded-lg hover:bg-pink-600 transition-colors">
                    <div class="text-3xl mb-2">💅</div>
                    <div class="font-semibold">Novo Agendamento</div>
                </button>
            </div>

            <div id="clientContent">
                <div class="text-center text-white/70">
                    <p>Bem-vinda! Selecione uma opção acima para começar.</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Professional Dashboard -->
    <div id="professionalDashboard" class="container mx-auto px-6 py-8 hidden">
        <div class="glass-container rounded-2xl shadow-xl p-8">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold text-white">Painel Profissional</h2>
                <div class="flex gap-2">
                    <span id="professionalName" class="text-white/70"></span>
                    <button onclick="logout()" class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors">
                        Sair
                    </button>
                </div>
            </div>

            <div class="grid md:grid-cols-7 gap-4 mb-8">
                <button onclick="showGoogleCalendarManagement()" class="bg-indigo-500 text-white p-4 rounded-lg hover:bg-indigo-600 transition-colors">
                    <div class="text-2xl mb-2">📧</div>
                    <div class="font-semibold text-sm">Google Agenda</div>
                </button>
                <button onclick="showAgenda()" class="bg-blue-500 text-white p-4 rounded-lg hover:bg-blue-600 transition-colors">
                    <div class="text-2xl mb-2">📅</div>
                    <div class="font-semibold text-sm">Agenda Local</div>
                </button>
                <button onclick="showClients()" class="bg-green-500 text-white p-4 rounded-lg hover:bg-green-600 transition-colors">
                    <div class="text-2xl mb-2">👥</div>
                    <div class="font-semibold text-sm">Clientes</div>
                </button>
                <button onclick="showServices()" class="bg-purple-500 text-white p-4 rounded-lg hover:bg-purple-600 transition-colors">
                    <div class="text-2xl mb-2">💅</div>
                    <div class="font-semibold text-sm">Serviços</div>
                </button>
                <button onclick="showReports()" class="bg-orange-500 text-white p-4 rounded-lg hover:bg-orange-600 transition-colors">
                    <div class="text-2xl mb-2">📊</div>
                    <div class="font-semibold text-sm">Relatórios</div>
                </button>
                <button onclick="showBackgroundUpload()" class="bg-pink-500 text-white p-4 rounded-lg hover:bg-pink-600 transition-colors">
                    <div class="text-2xl mb-2">🖼️</div>
                    <div class="font-semibold text-sm">Fundo</div>
                </button>
                <button onclick="showStorageManagement()" class="bg-teal-500 text-white p-4 rounded-lg hover:bg-teal-600 transition-colors">
                    <div class="text-2xl mb-2">💾</div>
                    <div class="font-semibold text-sm">Armazenamento</div>
                </button>
            </div>

            <div id="professionalContent">
                <div class="text-center text-white/70">
                    <p>Bem-vindo ao painel profissional! Selecione uma opção acima.</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Service Modal -->
    <div id="serviceModal" class="modal">
        <div class="glass-container rounded-3xl shadow-2xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div id="modalContent">
                <!-- Modal content will be generated by JavaScript -->
            </div>
        </div>
    </div>

    <!-- Location Modal -->
    <div id="locationModal" class="modal">
        <div class="glass-container rounded-3xl shadow-2xl max-w-lg w-full mx-4">
            <div class="p-8">
                <div class="flex justify-between items-center mb-6">
                    <div class="flex items-center gap-3">
                        <div class="p-3 rounded-full bg-gradient-to-r from-blue-500 to-purple-500">
                            <span class="text-2xl">📍</span>
                        </div>
                        <h2 class="text-2xl font-bold text-white">Como Chegar</h2>
                    </div>
                    <button onclick="closeLocationModal()" class="text-white/80 hover:text-white text-2xl font-bold">×</button>
                </div>
                
                <div class="mb-6">
                    <div class="glass-container rounded-xl p-4">
                        <h3 class="text-lg font-semibold text-white mb-3">📍 Endereço:</h3>
                        <div class="text-white/90 leading-relaxed">
                            <p class="font-semibold">Rua Manoel de Campos Sales, 461</p>
                            <p>Bairro: São Cristovão</p>
                            <p>Chapecó - SC</p>
                        </div>
                    </div>
                </div>

                <div class="space-y-3">
                    <button onclick="openGoogleMaps()" class="w-full bg-gradient-to-r from-blue-500 to-blue-600 text-white py-3 rounded-xl font-bold hover:scale-105 transition-all duration-300 shadow-lg flex items-center justify-center gap-2">
                        <span class="text-xl">🗺️</span>
                        <span>Abrir no Google Maps</span>
                    </button>
                    
                    <div class="grid grid-cols-2 gap-3">
                        <button onclick="openUber()" class="bg-gradient-to-r from-gray-800 to-black text-white py-3 rounded-xl font-bold hover:scale-105 transition-all duration-300 shadow-lg flex items-center justify-center gap-2">
                            <span class="text-lg">🚗</span>
                            <span>Uber</span>
                        </button>
                        <button onclick="open99()" class="bg-gradient-to-r from-yellow-500 to-orange-500 text-white py-3 rounded-xl font-bold hover:scale-105 transition-all duration-300 shadow-lg flex items-center justify-center gap-2">
                            <span class="text-lg">🚕</span>
                            <span>99</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Welcome Pop-up da Versão 165 -->
    <div id="welcomePopup" class="modal">
        <div class="glass-container rounded-xl shadow-2xl max-w-md w-full mx-4 relative overflow-hidden" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 25%, #f093fb 50%, #f5576c 75%, #4facfe 100%); background-size: 300% 300%; animation: gradientFlow 12s ease infinite;">
            <!-- Partículas flutuantes no pop-up -->
            <div class="absolute inset-0 pointer-events-none" style="background: radial-gradient(circle at 25% 75%, rgba(255, 255, 255, 0.1) 0%, transparent 40%), radial-gradient(circle at 75% 25%, rgba(255, 255, 255, 0.08) 0%, transparent 40%), radial-gradient(circle at 50% 50%, rgba(255, 255, 255, 0.05) 0%, transparent 50%); animation: floatingParticles 18s ease-in-out infinite;"></div>
            <div class="p-8 text-center relative z-10">
                <button onclick="closeWelcomePopup()" class="absolute top-3 right-3 text-white/80 hover:text-white text-lg font-light w-8 h-8 flex items-center justify-center rounded-full hover:bg-white/20 transition-all">×</button>
                
                <div class="mb-6">
                    <h2 class="text-3xl font-light text-white mb-4 tracking-wide uppercase">BEM VINDA!!!</h2>
                </div>
                
                <div class="bg-black/60 backdrop-blur-sm rounded-xl p-6 mb-6 border border-yellow-300/50 shadow-xl">
                    <div class="text-center">
                        <div class="text-center mb-3">
                            <div class="bg-gradient-to-r from-yellow-300 to-orange-300 bg-clip-text text-transparent text-lg font-light tracking-widest mb-2">
                                ✨ OFERTA ESPECIAL ✨
                            </div>
                            <div class="flex items-center justify-center gap-3 mb-2">
                                <span class="text-3xl animate-pulse">🎁</span>
                                <span class="text-yellow-200 text-2xl font-light tracking-wide">10% de desconto</span>
                                <span class="text-3xl animate-pulse">🎁</span>
                            </div>
                            <div class="text-white text-base font-light tracking-wide">
                                no seu primeiro agendamento
                            </div>
                        </div>
                        <div class="mt-2 text-pink-200 text-sm font-light italic">
                            Válido apenas para novos clientes que se cadastrarem!!!
                        </div>
                    </div>
                </div>
                
                <div class="flex gap-4">
                    <button onclick="closeWelcomePopup(); showBookingModal();" class="flex-1 bg-gradient-to-r from-pink-500 to-purple-500 text-white px-6 py-3 rounded-lg font-bold text-sm tracking-wide hover:scale-105 transition-all duration-300 shadow-lg uppercase animate-pulse">
                        📅 AGENDAR
                    </button>
                    <button onclick="closeWelcomePopup()" class="flex-1 bg-gray-500 text-white px-6 py-3 rounded-lg font-light text-sm tracking-wide hover:bg-gray-600 hover:scale-105 transition-all duration-300 uppercase">
                        ← CATÁLOGO
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Image Modal -->
    <div id="imageModal" class="modal">
        <div class="max-w-4xl w-full mx-4">
            <div class="relative">
                <button onclick="closeImageModal()" class="absolute top-4 right-4 z-10 glass-container rounded-full w-12 h-12 flex items-center justify-center text-white/80 hover:text-white hover:bg-white/20 transition-all duration-300 text-2xl font-bold">
                    ×
                </button>
                <div class="glass-container rounded-2xl overflow-hidden">
                    <img id="modalImage" src="" alt="" class="w-full max-h-[80vh] object-contain">
                    <div class="p-4 text-center">
                        <h3 id="modalImageTitle" class="text-white font-semibold"></h3>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Booking Modal -->
    <div id="bookingModal" class="modal">
        <div class="glass-container rounded-3xl shadow-2xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div class="p-8">
                <div class="flex justify-between items-center mb-6">
                    <div class="flex items-center gap-3">
                        <div class="p-3 rounded-full bg-gradient-to-r from-pink-500 to-purple-500">
                            <span class="text-2xl">📅</span>
                        </div>
                        <h2 class="text-2xl font-bold text-white">Agendamento Online</h2>
                    </div>
                    <button onclick="closeBookingModal()" class="text-white/80 hover:text-white text-2xl font-bold">×</button>
                </div>

                <div id="bookingStep1" class="booking-step">
                    <div class="glass-container rounded-xl p-4 mb-6 border-l-4 border-green-400">
                        <div class="flex items-center gap-2 mb-2">
                            <span class="text-xl">🎉</span>
                            <p class="text-white font-bold">Oferta Especial!</p>
                        </div>
                        <p class="text-white/90">Cadastre-se e ganhe 10% de desconto no seu primeiro agendamento!</p>
                    </div>

                    <form id="clientForm" onsubmit="handleClientForm(event)" class="space-y-4">
                        <div class="grid md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-white font-semibold mb-2">Nome Completo *</label>
                                <input type="text" id="clientName" required class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                            </div>
                            
                            <div>
                                <label class="block text-white font-semibold mb-2">Data de Nascimento *</label>
                                <input type="date" id="clientBirthdate" required class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                            </div>
                        </div>
                        
                        <div class="grid md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-white font-semibold mb-2">CPF *</label>
                                <input type="text" id="clientCPF" required placeholder="000.000.000-00" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                            </div>
                            
                            <div>
                                <label class="block text-white font-semibold mb-2">WhatsApp *</label>
                                <input type="tel" id="clientPhone" required placeholder="(00) 00000-0000" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                            </div>
                        </div>

                        <button type="submit" class="w-full btn-primary py-4 rounded-xl text-lg font-bold hover:scale-105 transition-all duration-300 shadow-lg">
                            ✨ Continuar para Agendamento
                        </button>
                    </form>
                </div>

                <div id="bookingStep2" class="booking-step hidden">
                    <div class="mb-4">
                        <h3 class="text-lg font-semibold text-white mb-3">Selecione o Serviço:</h3>
                        <select id="serviceSelect" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                            <option value="">Escolha um serviço...</option>
                        </select>
                    </div>

                    <div class="mb-4">
                        <h3 class="text-lg font-semibold text-white mb-3">Escolha Data e Horário:</h3>
                        <div class="glass-container rounded-lg p-4">
                            <div class="flex items-center justify-center mb-4">
                                <div class="flex items-center gap-2 text-white/80">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/>
                                    </svg>
                                    <span class="font-semibold">📅 Agenda Integrada com Google Calendar</span>
                                </div>
                            </div>
                            
                            <div class="mb-4">
                                <label class="block text-white font-semibold mb-2">Selecione a Data:</label>
                                <input type="date" id="appointmentDate" onchange="loadAvailableSlots()" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                            </div>
                            
                            <div id="loadingSlots" class="hidden text-center py-4">
                                <div class="loading-spinner mx-auto mb-2"></div>
                                <p class="text-white/70">Carregando horários disponíveis...</p>
                            </div>
                            
                            <div id="availableSlots" class="hidden">
                                <label class="block text-white font-semibold mb-3">Horários Disponíveis:</label>
                                <div id="slotsGrid" class="grid grid-cols-3 gap-2">
                                    <!-- Slots will be loaded here -->
                                </div>
                                <div class="mt-3 text-center">
                                    <p class="text-white/60 text-sm">
                                        ✅ Verde: Disponível | 🔴 Vermelho: Ocupado | ⏰ Tempo real
                                    </p>
                                </div>
                            </div>
                            
                            <div id="noSlotsMessage" class="hidden text-center py-4">
                                <p class="text-white/70">😔 Não há horários disponíveis para esta data.</p>
                                <p class="text-white/60 text-sm mt-2">Tente selecionar outra data ou entre em contato conosco.</p>
                            </div>
                            
                            <div class="mt-4 p-3 bg-blue-500/20 rounded-lg">
                                <div class="flex items-center gap-2 mb-2">
                                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" class="text-blue-300">
                                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                                    </svg>
                                    <span class="text-blue-300 font-semibold text-sm">Integração Google Calendar</span>
                                </div>
                                <p class="text-blue-200 text-xs">
                                    📧 Agenda vinculada: <strong>alinemenezesstudio@gmail.com</strong><br>
                                    🔒 Privacidade: Apenas admin vê detalhes dos agendamentos<br>
                                    ⏰ Horários atualizados em tempo real com a agenda da profissional<br>
                                    📅 Agendamentos são automaticamente adicionados ao Google Calendar
                                </p>
                            </div>
                        </div>
                    </div>

                    <div class="flex gap-3">
                        <button onclick="backToStep1()" class="flex-1 glass-container text-white py-3 rounded-lg font-semibold hover:bg-white/20 transition-colors">
                            Voltar
                        </button>
                        <button onclick="confirmBooking()" class="flex-1 bg-gradient-to-r from-green-500 to-emerald-500 text-white py-3 rounded-lg font-semibold hover:from-green-600 hover:to-emerald-600 transition-colors">
                            Confirmar Agendamento
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global Variables
        let currentFilter = 'cilios';
        let selectedTimeSlot = '';
        let clientData = {};
        let currentUser = null;
        let userType = null;
        let isFirstTimeClient = false;
        
        // Google Calendar Integration
        const GOOGLE_CALENDAR_CONFIG = {
            // Configurações do Google Calendar - Aline Menezes Studio
            calendarId: 'alinemenezesstudio@gmail.com', // Email específico da agenda
            apiKey: 'YOUR_GOOGLE_CALENDAR_API_KEY', // Substitua pela sua API Key
            timeZone: 'America/Sao_Paulo',
            businessHours: {
                start: '09:00',
                end: '18:00',
                interval: 90, // 1h30min por atendimento
                daysOff: [0], // Domingo = 0, Segunda = 1, etc.
                lunch: { start: '12:00', end: '13:30' }
            },
            // Configurações de privacidade
            privacy: {
                adminOnly: true, // Apenas admin vê detalhes dos agendamentos
                publicView: 'busy' // Clientes veem apenas se está ocupado ou livre
            }
        };
        
        // Simulação de eventos ocupados (substitua pela integração real)
        let simulatedBusySlots = {
            '2024-12-20': ['09:00', '14:00'],
            '2024-12-21': ['10:30', '15:30'],
            '2024-12-22': ['09:00', '11:00', '16:00']
        };

        // Service Data da Versão 165 Original
        let services = [
            {
                id: 1,
                name: "Lash Lifting",
                category: "cilios",
                image: "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400&h=300&fit=crop&crop=face",
                description: "Curvatura natural dos cílios. ✨ NOVOS CLIENTES: 10% DE DESCONTO!",
                price: 80,
                packages: [
                    { name: "Lifting + Tintura", price: 110, description: "Curvatura + coloração dos cílios" },
                    { name: "Lifting + Hidratação", price: 120, description: "Lifting + tratamento nutritivo" }
                ]
            },
            {
                id: 2,
                name: "Volume Brasileiro",
                category: "cilios",
                image: "https://images.unsplash.com/photo-1616394584738-fc6e612e71b9?w=400&h=300&fit=crop&crop=face",
                description: "Volume natural aos cílios. ✨ NOVOS CLIENTES: 10% DE DESCONTO!",
                price: 120,
                maintenance15: 80,
                maintenance20: 100,
                packages: [
                    { name: "Volume Brasileiro + Manutenção", price: 180, description: "Aplicação + primeira manutenção" }
                ]
            },
            {
                id: 3,
                name: "Volume Castanho",
                category: "cilios",
                image: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 200'%3E%3Crect fill='%23d63031' width='200' height='200'/%3E%3Cpath fill='%23a29bfe' d='M100 75c-30 0-50 20-50 40v25c0 20 25 30 50 30s50-10 50-30v-25c0-20-20-40-50-40z'/%3E%3Cpath fill='%236c5ce7' d='M70 90c8-5 15-5 23 0s15 5 23 0s15-5 23 0v8c-8 5-15 5-23 0s-15-5-23 0s-15 5-23 0v-8z'/%3E%3C/svg%3E",
                description: "Volume castanho natural. ✨ NOVOS CLIENTES: 10% DE DESCONTO!",
                price: 140,
                maintenance15: 90,
                maintenance20: 110
            },
            {
                id: 7,
                name: "Volume Glamour 5D",
                category: "cilios",
                image: "https://images.unsplash.com/photo-1583001931096-959e9a1a6223?w=400&h=300&fit=crop&crop=face",
                description: "Volume extremo 5D. ✨ NOVOS CLIENTES: 10% DE DESCONTO!",
                price: 180,
                maintenance15: 120,
                maintenance20: 140,
                packages: [
                    { name: "Glamour 5D + Manutenção Premium", price: 280, description: "Aplicação 5D + manutenção especializada" },
                    { name: "Glamour 5D + Hidratação Intensiva", price: 220, description: "Volume 5D + tratamento nutritivo profundo" }
                ]
            },
            {
                id: 4,
                name: "Design de Sobrancelhas",
                category: "sobrancelha",
                image: "https://images.unsplash.com/photo-1522337360788-8b13dee7a37e?w=400&h=300&fit=crop&crop=face",
                description: "Modelagem personalizada. ✨ NOVOS CLIENTES: 10% DE DESCONTO!",
                price: 45,
                packages: [
                    { name: "Design + Henna", price: 65, description: "Modelagem + coloração com henna" }
                ]
            },
            {
                id: 5,
                name: "Brown Lamination",
                category: "sobrancelha",
                image: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 200'%3E%3Crect fill='%23fdcb6e' width='200' height='200'/%3E%3Cpath fill='%23e17055' d='M40 80c30-15 55-15 85 0s55 15 85 0v35c-30 15-55 15-85 0s-55-15-85 0V80z'/%3E%3Cpath fill='%23d63031' d='M60 90h80v18H60z'/%3E%3C/svg%3E",
                description: "Laminação com volume natural. ✨ NOVOS CLIENTES: 10% DE DESCONTO!",
                price: 120
            },
            {
                id: 8,
                name: "Design com Tintura/Henna",
                category: "sobrancelha",
                image: "https://images.unsplash.com/photo-1616394584738-fc6e612e71b9?w=400&h=300&fit=crop&crop=face",
                description: "Design com tintura/henna. ✨ NOVOS CLIENTES: 10% DE DESCONTO!",
                price: 65,
                packages: [
                    { name: "Design + Tintura Premium", price: 80, description: "Modelagem + coloração com tintura de longa duração" },
                    { name: "Design + Henna Natural", price: 75, description: "Modelagem + coloração com henna 100% natural" }
                ]
            },
            {
                id: 9,
                name: "Protocolo de Crescimento",
                category: "sobrancelha",
                image: "https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=400&h=300&fit=crop&crop=face",
                description: "Tratamento para crescimento. ✨ NOVOS CLIENTES: 10% DE DESCONTO!",
                price: 150,
                packages: [
                    { name: "Protocolo Completo 30 dias", price: 280, description: "Tratamento + produtos + 2 sessões de acompanhamento" },
                    { name: "Protocolo Intensivo 60 dias", price: 450, description: "Tratamento completo + produtos premium + 4 sessões" }
                ]
            },
            {
                id: 6,
                name: "Microblading Fio a Fio",
                category: "micropigmentacao",
                image: "https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=400&h=300&fit=crop&crop=face",
                description: "Micropigmentação fio a fio. ✨ NOVOS CLIENTES: 10% DE DESCONTO!",
                price: 350,
                packages: [
                    { name: "Microblading + Retoque", price: 450, description: "Aplicação + retoque após 30 dias" }
                ]
            },
            {
                id: 10,
                name: "Micropigmentação de Sobrancelhas",
                category: "micropigmentacao",
                image: "https://images.unsplash.com/photo-1522337360788-8b13dee7a37e?w=400&h=300&fit=crop&crop=face",
                description: "Técnica avançada de micropigmentação para sobrancelhas com efeito natural e duradouro. Preenchimento uniforme e definição perfeita. ✨ NOVOS CLIENTES: 10% DE DESCONTO!",
                price: 400,
                packages: [
                    { name: "Micropigmentação + Retoque Premium", price: 520, description: "Aplicação + retoque especializado após 45 dias" },
                    { name: "Micropigmentação + Design Personalizado", price: 480, description: "Técnica completa + design exclusivo para seu rosto" }
                ]
            },
            {
                id: 11,
                name: "Micropigmentação de Olhos",
                category: "micropigmentacao",
                image: "https://images.unsplash.com/photo-1583001931096-959e9a1a6223?w=400&h=300&fit=crop&crop=face",
                description: "Delineado permanente que realça o olhar com traços precisos e elegantes. Técnica segura e resultado natural que dura até 3 anos. ✨ NOVOS CLIENTES: 10% DE DESCONTO!",
                price: 450,
                packages: [
                    { name: "Delineado Superior + Inferior", price: 650, description: "Micropigmentação completa dos olhos" },
                    { name: "Delineado + Esfumado", price: 580, description: "Delineado com efeito esfumado para look mais suave" }
                ]
            },
            {
                id: 12,
                name: "Micropigmentação de Boca",
                category: "micropigmentacao",
                image: "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400&h=300&fit=crop&crop=face",
                description: "Contorno e preenchimento labial para lábios mais definidos e volumosos. Cor natural e duradoura que realça sua beleza. ✨ NOVOS CLIENTES: 10% DE DESCONTO!",
                price: 500,
                packages: [
                    { name: "Contorno + Preenchimento Completo", price: 680, description: "Técnica completa para lábios perfeitos" },
                    { name: "Aquarela Labial", price: 620, description: "Técnica suave com efeito natural e translúcido" }
                ]
            },
            {
                id: 13,
                name: "Microblading Fio a Fio",
                category: "micropigmentacao-sobrancelhas",
                image: "https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=400&h=300&fit=crop&crop=face",
                description: "Técnica de microblading especializada para sobrancelhas com traços ultra-realistas. Cada fio é desenhado individualmente para resultado natural perfeito. ✨ NOVOS CLIENTES: 10% DE DESCONTO!",
                price: 380,
                packages: [
                    { name: "Microblading + Retoque 30 dias", price: 480, description: "Aplicação completa + retoque de aperfeiçoamento" },
                    { name: "Microblading + Design Premium", price: 450, description: "Técnica fio a fio + design personalizado exclusivo" }
                ]
            },
            {
                id: 14,
                name: "Shadow",
                category: "micropigmentacao-sobrancelhas",
                image: "https://images.unsplash.com/photo-1522337360788-8b13dee7a37e?w=400&h=300&fit=crop&crop=face",
                description: "Técnica shadow que cria efeito esfumado e natural nas sobrancelhas. Preenchimento suave com gradação perfeita para look sofisticado. ✨ NOVOS CLIENTES: 10% DE DESCONTO!",
                price: 420,
                packages: [
                    { name: "Shadow + Fios Híbridos", price: 550, description: "Combinação shadow + alguns fios para efeito 3D" },
                    { name: "Shadow + Retoque Premium", price: 520, description: "Técnica shadow + retoque especializado" }
                ]
            },
            {
                id: 15,
                name: "Nanoblading",
                category: "micropigmentacao-sobrancelhas",
                image: "https://images.unsplash.com/photo-1616394584738-fc6e612e71b9?w=400&h=300&fit=crop&crop=face",
                description: "Técnica mais avançada que o microblading, com traços ainda mais finos e precisos. Resultado ultra-natural com durabilidade superior. ✨ NOVOS CLIENTES: 10% DE DESCONTO!",
                price: 480,
                packages: [
                    { name: "Nanoblading + Retoque Avançado", price: 600, description: "Técnica premium + retoque com tecnologia avançada" },
                    { name: "Nanoblading + Manutenção 60 dias", price: 650, description: "Aplicação + manutenção especializada estendida" }
                ]
            },
            {
                id: 16,
                name: "Delineado de Olhos",
                category: "micropigmentacao-olhos",
                image: "https://images.unsplash.com/photo-1583001931096-959e9a1a6223?w=400&h=300&fit=crop&crop=face",
                description: "Delineado permanente que realça e define o contorno dos olhos. Traço preciso e elegante que valoriza seu olhar de forma natural e duradoura. ✨ NOVOS CLIENTES: 10% DE DESCONTO!",
                price: 400,
                packages: [
                    { name: "Delineado Superior + Inferior", price: 580, description: "Delineado completo nos dois olhos" },
                    { name: "Delineado + Esfumado Suave", price: 520, description: "Delineado com efeito esfumado delicado" }
                ]
            },
            {
                id: 17,
                name: "Efeito Batom",
                category: "micropigmentacao-labios",
                image: "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400&h=300&fit=crop&crop=face",
                description: "Micropigmentação labial que simula o efeito de batom natural. Cor uniforme e duradoura que mantém os lábios sempre com aparência maquiada. ✨ NOVOS CLIENTES: 10% DE DESCONTO!",
                price: 450,
                packages: [
                    { name: "Efeito Batom + Contorno Definido", price: 580, description: "Preenchimento completo + contorno marcado" },
                    { name: "Efeito Batom + Hidratação Labial", price: 520, description: "Micropigmentação + tratamento hidratante" }
                ]
            },
            {
                id: 18,
                name: "Neutralização",
                category: "micropigmentacao-labios",
                image: "https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=400&h=300&fit=crop&crop=face",
                description: "Técnica especializada para neutralizar pigmentações indesejadas nos lábios. Corrige cores antigas ou manchas, preparando para nova micropigmentação. ✨ NOVOS CLIENTES: 10% DE DESCONTO!",
                price: 350,
                packages: [
                    { name: "Neutralização + Nova Pigmentação", price: 650, description: "Correção completa + aplicação de nova cor" },
                    { name: "Neutralização + Tratamento Reparador", price: 450, description: "Correção + cuidados pós-procedimento" }
                ]
            }
        ];

        // Sample Data da Versão 165
        const clientsDatabase = [
            {
                cpf: '123.456.789-00',
                phone: '(47) 99999-9999',
                name: 'Maria Silva',
                email: 'maria.silva@email.com',
                birthdate: '1990-05-15',
                appointments: [
                    {
                        id: 1,
                        date: new Date().toISOString().split('T')[0],
                        time: '09:00',
                        service: 'Volume Brasileiro',
                        professional: 'Aline Menezes',
                        price: 120,
                        payment: 'Cartão',
                        status: 'Agendado',
                        notes: 'Cliente preferencial - primeira vez'
                    }
                ]
            }
        ];

        const professionalsDatabase = [
            {
                email: 'admin',
                password: '123',
                name: 'Aline Menezes',
                role: 'admin'
            }
        ];

        // Notification System da Versão 165
        function showNotification(message, type = 'info') {
            document.querySelectorAll('.notification').forEach(n => n.remove());
            
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.innerHTML = `<div style="white-space: pre-line;">${message}</div>`;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.classList.add('show');
            }, 100);
            
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.classList.remove('show');
                    setTimeout(() => {
                        notification.remove();
                    }, 300);
                }
            }, 5000);
        }

        // Service Functions da Versão 165
        function renderServices() {
            const grid = document.getElementById('servicesGrid');
            if (!grid) return;
            
            const filteredServices = currentFilter === 'todos' 
                ? services 
                : services.filter(service => service.category === currentFilter);

            grid.innerHTML = filteredServices.map(service => `
                <div class="service-card bg-white rounded-2xl shadow-lg overflow-hidden cursor-pointer" onclick="showServiceModal(${service.id})">
                    <div class="relative">
                        <img src="${service.image}" alt="${service.name}" class="w-full h-48 object-cover" onerror="this.src='data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 200 200\\'%3E%3Crect fill=\\'%23f3f4f6\\' width=\\'200\\' height=\\'200\\'/%3E%3Ctext x=\\'50%25\\' y=\\'50%25\\' text-anchor=\\'middle\\' dy=\\'.3em\\' fill=\\'%236b7280\\' font-size=\\'14\\'%3E${service.name}%3C/text%3E%3C/svg%3E'">
                        <div class="absolute top-4 right-4 bg-white/90 backdrop-blur-sm rounded-full px-3 py-1">
                            <span class="text-sm font-bold text-pink-600">R$ ${service.price.toFixed(2).replace('.', ',')}</span>
                        </div>
                    </div>
                    <div class="p-6">
                        <h3 class="text-xl font-bold text-gray-800 mb-2">${service.name}</h3>
                        <p class="text-gray-600 text-sm mb-4 line-clamp-3">${service.description}</p>
                        <div class="text-center">
                            <button class="bg-gradient-to-r from-pink-500 to-rose-500 text-white px-4 py-2 rounded-lg text-sm font-semibold hover:from-pink-600 hover:to-rose-600 transition-colors">
                                Ver Detalhes
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        function filterServices(category) {
            currentFilter = category;
            renderServices();
            
            // Update filter buttons
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.classList.remove('bg-gradient-to-r', 'from-pink-500', 'to-purple-500');
                btn.classList.add('bg-black/50');
            });
            
            // Update subcategory buttons
            document.querySelectorAll('.subcategory-btn').forEach(btn => {
                btn.classList.remove('bg-gradient-to-r', 'from-pink-500', 'to-purple-500');
                btn.classList.add('bg-gradient-to-r', 'from-pink-500/70', 'to-purple-500/70');
            });
            
            // Highlight active button
            if (event && event.target) {
                if (event.target.classList.contains('filter-btn')) {
                    event.target.classList.remove('bg-black/50');
                    event.target.classList.add('bg-gradient-to-r', 'from-pink-500', 'to-purple-500');
                } else if (event.target.classList.contains('subcategory-btn')) {
                    event.target.classList.remove('bg-gradient-to-r', 'from-pink-500/70', 'to-purple-500/70');
                    event.target.classList.add('bg-gradient-to-r', 'from-pink-500', 'to-purple-500');
                }
            }
            
            // Hide subcategories if not micropigmentation
            if (!category.startsWith('micropigmentacao')) {
                document.getElementById('micropigmentacaoSubcategories').classList.add('hidden');
                document.getElementById('micropigmentacaoBtn').innerHTML = 'MICROPIGMENTAÇÃO ▼';
            }
        }

        function toggleMicropigmentacao() {
            const subcategories = document.getElementById('micropigmentacaoSubcategories');
            const btn = document.getElementById('micropigmentacaoBtn');
            
            if (subcategories.classList.contains('hidden')) {
                subcategories.classList.remove('hidden');
                btn.innerHTML = 'MICROPIGMENTAÇÃO ▲';
                
                // Update button style
                document.querySelectorAll('.filter-btn').forEach(b => {
                    b.classList.remove('bg-gradient-to-r', 'from-pink-500', 'to-purple-500');
                    b.classList.add('bg-black/50');
                });
                btn.classList.remove('bg-black/50');
                btn.classList.add('bg-gradient-to-r', 'from-pink-500', 'to-purple-500');
                
                // Show all micropigmentation services by default
                currentFilter = 'micropigmentacao-sobrancelhas';
                renderServices();
            } else {
                subcategories.classList.add('hidden');
                btn.innerHTML = 'MICROPIGMENTAÇÃO ▼';
                btn.classList.remove('bg-gradient-to-r', 'from-pink-500', 'to-purple-500');
                btn.classList.add('bg-black/50');
            }
        }

        function showServiceModal(serviceId) {
            const service = services.find(s => s.id === serviceId);
            if (!service) return;

            const modal = document.getElementById('serviceModal');
            const modalContent = document.getElementById('modalContent');
            
            modalContent.innerHTML = `
                <div class="relative">
                    <button onclick="closeServiceModal()" class="absolute top-4 right-4 z-10 glass-container rounded-full w-10 h-10 flex items-center justify-center text-white/80 hover:text-white hover:bg-white/20 transition-all duration-300 text-xl font-bold">
                        ×
                    </button>
                    
                    <div class="relative overflow-hidden rounded-t-3xl">
                        <img src="${service.image}" alt="${service.name}" class="w-full h-64 object-cover" onerror="this.src='data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 400 300\\'%3E%3Crect fill=\\'%23667eea\\' width=\\'400\\' height=\\'300\\'/%3E%3Ctext x=\\'50%25\\' y=\\'50%25\\' text-anchor=\\'middle\\' dy=\\'.3em\\' fill=\\'white\\' font-size=\\'18\\'%3E${service.name}%3C/text%3E%3C/svg%3E'">
                        <div class="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent"></div>
                    </div>
                    
                    <div class="p-8">
                        <div class="mb-6">
                            <h2 class="text-3xl font-bold text-white mb-3">${service.name}</h2>
                            <p class="text-white/90 text-lg mb-4 leading-relaxed">${service.description}</p>
                            <div class="flex items-center gap-4">
                                <span class="text-2xl font-bold text-green-400">R$ ${service.price.toFixed(2).replace('.', ',')}</span>
                                <span class="glass-container px-3 py-1 rounded-full text-white font-semibold uppercase tracking-wide text-sm">${service.category}</span>
                            </div>
                        </div>

                        ${service.detailImage1 || service.detailImage2 ? `
                            <div class="mb-6">
                                <h3 class="text-lg font-semibold text-white mb-3">📸 Fotos de Detalhes</h3>
                                <div class="grid grid-cols-2 gap-4">
                                    ${service.detailImage1 ? `
                                        <div class="glass-container rounded-lg overflow-hidden">
                                            <img src="${service.detailImage1}" alt="Detalhe 1" class="w-full h-32 object-cover hover:scale-105 transition-transform duration-300 cursor-pointer" onclick="showImageModal('${service.detailImage1}', 'Detalhe 1 - ${service.name}')">
                                        </div>
                                    ` : ''}
                                    ${service.detailImage2 ? `
                                        <div class="glass-container rounded-lg overflow-hidden">
                                            <img src="${service.detailImage2}" alt="Detalhe 2" class="w-full h-32 object-cover hover:scale-105 transition-transform duration-300 cursor-pointer" onclick="showImageModal('${service.detailImage2}', 'Detalhe 2 - ${service.name}')">
                                        </div>
                                    ` : ''}
                                </div>
                            </div>
                        ` : ''}

                        ${service.maintenance15 || service.maintenance20 ? `
                            <div class="mb-4">
                                <h3 class="text-lg font-semibold text-white mb-3">💅 Manutenções</h3>
                                <div class="grid gap-2">
                                    ${service.maintenance15 ? `
                                        <div class="flex justify-between items-center p-3 bg-blue-500/20 rounded-lg">
                                            <span class="text-blue-200">Manutenção 15 dias</span>
                                            <span class="font-semibold text-blue-300">R$ ${service.maintenance15.toFixed(2).replace('.', ',')}</span>
                                        </div>
                                    ` : ''}
                                    ${service.maintenance20 ? `
                                        <div class="flex justify-between items-center p-3 bg-green-500/20 rounded-lg">
                                            <span class="text-green-200">Manutenção 20 dias</span>
                                            <span class="font-semibold text-green-300">R$ ${service.maintenance20.toFixed(2).replace('.', ',')}</span>
                                        </div>
                                    ` : ''}
                                </div>
                            </div>
                        ` : ''}

                        ${service.packages && service.packages.length > 0 ? `
                            <div class="mb-4">
                                <h3 class="text-lg font-semibold text-white mb-3">🎁 Pacotes Especiais</h3>
                                <div class="grid gap-2">
                                    ${service.packages.map(pkg => `
                                        <div class="p-3 glass-container rounded-lg">
                                            <div class="flex justify-between items-start mb-1">
                                                <h4 class="font-semibold text-white">${pkg.name}</h4>
                                                <span class="font-bold text-pink-300">R$ ${pkg.price.toFixed(2).replace('.', ',')}</span>
                                            </div>
                                            <p class="text-white/70 text-sm">${pkg.description}</p>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                        ` : ''}

                        <div class="flex gap-4">
                            <button onclick="closeServiceModal()" class="flex-1 glass-container text-white py-3 rounded-xl font-bold hover:bg-white/20 hover:scale-105 transition-all duration-300">
                                ← Fechar
                            </button>
                            <button onclick="bookService(${service.id})" class="flex-1 btn-primary py-3 rounded-xl font-bold hover:scale-105 transition-all duration-300">
                                📅 Agendar Agora
                            </button>
                        </div>
                    </div>
                </div>
            `;
            
            modal.classList.add('active');
        }

        function closeServiceModal() {
            document.getElementById('serviceModal').classList.remove('active');
        }

        function bookService(serviceId) {
            closeServiceModal();
            showBookingModal();
            
            setTimeout(() => {
                const serviceSelect = document.getElementById('serviceSelect');
                if (serviceSelect) {
                    serviceSelect.value = serviceId;
                }
            }, 100);
        }

        // Login Functions da Versão 165
        function showClientLogin() {
            document.getElementById('clientLoginForm').classList.remove('hidden');
            document.getElementById('professionalLoginForm').classList.add('hidden');
            
            document.getElementById('clientLoginBtn').classList.add('btn-primary');
            document.getElementById('professionalLoginBtn').classList.remove('btn-primary');
            document.getElementById('professionalLoginBtn').classList.add('glass-container');
        }

        function showProfessionalLogin() {
            document.getElementById('clientLoginForm').classList.add('hidden');
            document.getElementById('professionalLoginForm').classList.remove('hidden');
            
            document.getElementById('professionalLoginBtn').classList.add('btn-primary');
            document.getElementById('clientLoginBtn').classList.remove('btn-primary');
            document.getElementById('clientLoginBtn').classList.add('glass-container');
        }

        function loginClient(event) {
            if (event) event.preventDefault();
            
            const cpfField = document.getElementById('clientLoginCPF');
            const phoneField = document.getElementById('clientLoginPhone');
            
            if (!cpfField || !phoneField) {
                showNotification('❌ Erro nos campos de login', 'error');
                return;
            }
            
            const cpf = cpfField.value.trim();
            const phone = phoneField.value.trim();
            
            if (!cpf || !phone) {
                showNotification('❌ Por favor, preencha CPF e WhatsApp', 'error');
                return;
            }
            
            let client = clientsDatabase.find(c => 
                c.cpf.replace(/\D/g, '') === cpf.replace(/\D/g, '') ||
                c.phone.replace(/\D/g, '') === phone.replace(/\D/g, '')
            );
            
            if (!client) {
                client = {
                    cpf: cpf,
                    phone: phone,
                    name: 'Cliente Teste',
                    email: null,
                    birthdate: '1990-01-01',
                    appointments: []
                };
                clientsDatabase.push(client);
            }
            
            currentUser = client;
            userType = 'client';
            
            document.getElementById('accessPage').classList.add('hidden');
            document.getElementById('publicCatalog').classList.add('hidden');
            document.getElementById('professionalDashboard').classList.add('hidden');
            document.getElementById('clientDashboard').classList.remove('hidden');
            
            document.getElementById('accessBtn').textContent = 'SAIR';
            document.getElementById('accessBtn').setAttribute('onclick', 'logout()');
            
            showNotification(`🎉 Bem-vinda, ${client.name}! Login realizado com sucesso.`, 'success');
        }

        function loginProfessional(event) {
            if (event) event.preventDefault();
            
            const emailField = document.getElementById('professionalEmail');
            const passwordField = document.getElementById('professionalPassword');
            
            if (!emailField || !passwordField) {
                showNotification('❌ Erro nos campos de login', 'error');
                return;
            }
            
            const email = emailField.value.trim().toLowerCase();
            const password = passwordField.value.trim();
            
            if (!email || !password) {
                showNotification('❌ Por favor, preencha email e senha', 'error');
                return;
            }
            
            let professional = professionalsDatabase.find(p => 
                p.email.toLowerCase() === email && p.password === password
            );
            
            if (!professional && (email === 'admin' || password === '123')) {
                professional = {
                    email: email,
                    password: password,
                    name: 'Admin Teste',
                    role: 'admin'
                };
            }
            
            if (professional) {
                currentUser = professional;
                userType = 'professional';
                
                document.getElementById('accessPage').classList.add('hidden');
                document.getElementById('publicCatalog').classList.add('hidden');
                document.getElementById('clientDashboard').classList.add('hidden');
                document.getElementById('professionalDashboard').classList.remove('hidden');
                
                document.getElementById('accessBtn').textContent = 'SAIR';
                document.getElementById('accessBtn').setAttribute('onclick', 'logout()');
                
                document.getElementById('professionalName').textContent = professional.name;
                
                showNotification(`🎉 Bem-vindo, ${professional.name}! Login realizado com sucesso.`, 'success');
            } else {
                showNotification('❌ Email ou senha incorretos.\n\n💡 DADOS DE TESTE:\n📧 Email: admin\n🔑 Senha: 123', 'error');
            }
        }

        function logout() {
            currentUser = null;
            userType = null;
            showPublicCatalog();
            showNotification('✅ Logout realizado com sucesso!', 'success');
        }

        // Quick Login Functions da Versão 165
        function quickClientLogin() {
            const cpfField = document.getElementById('clientLoginCPF');
            const phoneField = document.getElementById('clientLoginPhone');
            
            if (cpfField && phoneField) {
                cpfField.value = '123.456.789-00';
                phoneField.value = '(47) 99999-9999';
                loginClient();
            } else {
                forceClientLogin();
            }
        }

        function quickProfessionalLogin() {
            const emailField = document.getElementById('professionalEmail');
            const passwordField = document.getElementById('professionalPassword');
            
            if (emailField && passwordField) {
                emailField.value = 'admin';
                passwordField.value = '123';
                loginProfessional();
            } else {
                forceProfessionalLogin();
            }
        }

        function forceClientLogin() {
            const client = {
                cpf: '123.456.789-00',
                phone: '(47) 99999-9999',
                name: 'Cliente Teste',
                appointments: []
            };
            
            currentUser = client;
            userType = 'client';
            
            document.querySelectorAll('#accessPage, #publicCatalog, #professionalDashboard').forEach(el => {
                el.classList.add('hidden');
            });
            
            document.getElementById('clientDashboard').classList.remove('hidden');
            
            document.getElementById('accessBtn').textContent = 'SAIR';
            document.getElementById('accessBtn').setAttribute('onclick', 'logout()');
            
            showNotification(`⚡ Login forçado realizado! Bem-vinda, ${client.name}!`, 'success');
        }

        function forceProfessionalLogin() {
            const professional = {
                email: 'admin',
                name: 'Admin Teste',
                role: 'admin'
            };
            
            currentUser = professional;
            userType = 'professional';
            
            document.querySelectorAll('#accessPage, #publicCatalog, #clientDashboard').forEach(el => {
                el.classList.add('hidden');
            });
            
            document.getElementById('professionalDashboard').classList.remove('hidden');
            
            document.getElementById('accessBtn').textContent = 'SAIR';
            document.getElementById('accessBtn').setAttribute('onclick', 'logout()');
            
            document.getElementById('professionalName').textContent = professional.name;
            
            showNotification(`⚡ Login forçado realizado! Bem-vindo, ${professional.name}!`, 'success');
        }

        // Navigation Functions da Versão 165
        function showPublicCatalog() {
            document.getElementById('publicCatalog').classList.remove('hidden');
            document.getElementById('accessPage').classList.add('hidden');
            document.getElementById('clientDashboard').classList.add('hidden');
            document.getElementById('professionalDashboard').classList.add('hidden');
            
            document.getElementById('accessBtn').textContent = 'ENTRAR';
            document.getElementById('accessBtn').setAttribute('onclick', 'toggleAccess()');
        }

        function showAccessPage() {
            document.getElementById('publicCatalog').classList.add('hidden');
            document.getElementById('accessPage').classList.remove('hidden');
            document.getElementById('clientDashboard').classList.add('hidden');
            document.getElementById('professionalDashboard').classList.add('hidden');
            
            document.getElementById('accessBtn').textContent = '← Voltar';
            document.getElementById('accessBtn').setAttribute('onclick', 'toggleAccess()');
        }

        function toggleAccess() {
            if (currentUser) {
                logout();
            } else {
                const catalogVisible = !document.getElementById('publicCatalog').classList.contains('hidden');
                if (catalogVisible) {
                    showAccessPage();
                } else {
                    showPublicCatalog();
                }
            }
        }

        // Client Dashboard Functions da Versão 165
        function showClientAppointments() {
            const content = document.getElementById('clientContent');
            const appointments = currentUser.appointments || [];
            
            content.innerHTML = `
                <div class="glass-container rounded-lg p-6">
                    <h3 class="text-xl font-bold text-white mb-4">📅 Meus Agendamentos</h3>
                    ${appointments.length === 0 ? 
                        '<p class="text-white/70">Você ainda não tem agendamentos.</p>' :
                        appointments.map(apt => `
                            <div class="glass-container rounded-lg p-4 mb-4">
                                <div class="flex justify-between items-start">
                                    <div>
                                        <h4 class="font-semibold text-white">${apt.service}</h4>
                                        <p class="text-white/70">📅 ${new Date(apt.date).toLocaleDateString('pt-BR')} às ${apt.time}</p>
                                        <p class="text-white/70">👩‍💼 ${apt.professional}</p>
                                        <p class="text-green-300 font-semibold">💰 R$ ${apt.price.toFixed(2).replace('.', ',')}</p>
                                    </div>
                                    <span class="px-3 py-1 rounded-full text-sm ${apt.status === 'Concluído' ? 'bg-green-500/20 text-green-300' : 'bg-blue-500/20 text-blue-300'}">${apt.status}</span>
                                </div>
                            </div>
                        `).join('')
                    }
                </div>
            `;
        }

        function showClientHistory() {
            const content = document.getElementById('clientContent');
            const appointments = currentUser.appointments || [];
            const completedAppointments = appointments.filter(apt => apt.status === 'Concluído');
            
            content.innerHTML = `
                <div class="glass-container rounded-lg p-6">
                    <h3 class="text-xl font-bold text-white mb-4">📋 Histórico de Atendimentos</h3>
                    ${completedAppointments.length === 0 ? 
                        '<p class="text-white/70">Você ainda não tem histórico de atendimentos.</p>' :
                        completedAppointments.map(apt => `
                            <div class="glass-container rounded-lg p-4 mb-4">
                                <div class="flex justify-between items-start">
                                    <div>
                                        <h4 class="font-semibold text-white">${apt.service}</h4>
                                        <p class="text-white/70">📅 ${new Date(apt.date).toLocaleDateString('pt-BR')} às ${apt.time}</p>
                                        <p class="text-white/70">💳 Pagamento: ${apt.payment}</p>
                                        <p class="text-green-300 font-semibold">💰 R$ ${apt.price.toFixed(2).replace('.', ',')}</p>
                                    </div>
                                    <div class="text-right">
                                        <span class="px-3 py-1 rounded-full text-sm bg-green-500/20 text-green-300">✅ Concluído</span>
                                        <button onclick="contactWhatsApp()" class="block mt-2 text-blue-300 hover:text-blue-200 text-sm">📱 Contato</button>
                                    </div>
                                </div>
                            </div>
                        `).join('')
                    }
                </div>
            `;
        }

        function showMainContent() {
            showPublicCatalog();
        }

        // Professional Dashboard Functions - Gerenciamento de Agenda Google
        function showGoogleCalendarManagement() {
            if (!currentUser || userType !== 'professional') {
                showNotification('❌ Acesso negado. Faça login como profissional.', 'error');
                return;
            }
            
            document.getElementById('professionalContent').innerHTML = `
                <div class="glass-container rounded-lg p-6">
                    <h3 class="text-xl font-bold text-white mb-6">📅 Gerenciar Agenda Google Calendar</h3>
                    
                    <div class="grid md:grid-cols-2 gap-6 mb-6">
                        <div class="glass-container rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">📧 Configurações da Agenda</h4>
                            <div class="space-y-2 text-white/80">
                                <p><strong>Email da Agenda:</strong> ${GOOGLE_CALENDAR_CONFIG.calendarId}</p>
                                <p><strong>Fuso Horário:</strong> ${GOOGLE_CALENDAR_CONFIG.timeZone}</p>
                                <p><strong>Horário de Funcionamento:</strong> ${GOOGLE_CALENDAR_CONFIG.businessHours.start} às ${GOOGLE_CALENDAR_CONFIG.businessHours.end}</p>
                                <p><strong>Intervalo por Atendimento:</strong> ${GOOGLE_CALENDAR_CONFIG.businessHours.interval} minutos</p>
                                <p><strong>Horário de Almoço:</strong> ${GOOGLE_CALENDAR_CONFIG.businessHours.lunch.start} às ${GOOGLE_CALENDAR_CONFIG.businessHours.lunch.end}</p>
                            </div>
                        </div>
                        
                        <div class="glass-container rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">🔒 Configurações de Privacidade</h4>
                            <div class="space-y-2 text-white/80">
                                <p><strong>Visibilidade Admin:</strong> ✅ Detalhes completos dos agendamentos</p>
                                <p><strong>Visibilidade Cliente:</strong> 🔒 Apenas horários ocupados/livres</p>
                                <p><strong>Eventos Privados:</strong> ✅ Ativado</p>
                                <p><strong>Dados Protegidos:</strong> Nome, telefone, serviço, valor</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="grid md:grid-cols-3 gap-4 mb-6">
                        <button onclick="viewTodaySchedule()" class="btn-primary px-4 py-3 rounded-lg font-semibold hover:scale-105 transition-all duration-300">
                            📅 Agenda de Hoje
                        </button>
                        <button onclick="viewWeekSchedule()" class="bg-blue-500 text-white px-4 py-3 rounded-lg font-semibold hover:bg-blue-600 hover:scale-105 transition-all duration-300">
                            📊 Agenda da Semana
                        </button>
                        <button onclick="syncGoogleCalendar()" class="bg-green-500 text-white px-4 py-3 rounded-lg font-semibold hover:bg-green-600 hover:scale-105 transition-all duration-300">
                            🔄 Sincronizar Agenda
                        </button>
                    </div>
                    
                    <div class="glass-container rounded-lg p-4">
                        <h4 class="text-lg font-semibold text-white mb-3">ℹ️ Como Configurar a API do Google Calendar</h4>
                        <div class="text-white/80 space-y-2 text-sm">
                            <p><strong>1.</strong> Acesse o <a href="https://console.cloud.google.com/" target="_blank" class="text-blue-300 hover:underline">Google Cloud Console</a></p>
                            <p><strong>2.</strong> Crie um novo projeto ou selecione um existente</p>
                            <p><strong>3.</strong> Ative a API do Google Calendar</p>
                            <p><strong>4.</strong> Crie credenciais (API Key + OAuth 2.0)</p>
                            <p><strong>5.</strong> Configure o OAuth com o email: <strong>${GOOGLE_CALENDAR_CONFIG.calendarId}</strong></p>
                            <p><strong>6.</strong> Substitua 'YOUR_GOOGLE_CALENDAR_API_KEY' pela sua API Key real</p>
                            <p><strong>7.</strong> Implemente o fluxo OAuth2 para obter tokens de acesso</p>
                        </div>
                    </div>
                </div>
            `;
        }

        async function viewTodaySchedule() {
            const today = new Date().toISOString().split('T')[0];
            await viewScheduleForDate(today);
        }

        async function viewWeekSchedule() {
            const today = new Date();
            const weekDays = [];
            
            for (let i = 0; i < 7; i++) {
                const date = new Date(today);
                date.setDate(today.getDate() + i);
                weekDays.push(date.toISOString().split('T')[0]);
            }
            
            let scheduleHtml = '<div class="space-y-4">';
            
            for (const date of weekDays) {
                const dayName = new Date(date).toLocaleDateString('pt-BR', { weekday: 'long' });
                const appointments = await getAppointmentsForDate(date);
                
                scheduleHtml += `
                    <div class="glass-container rounded-lg p-4">
                        <h5 class="font-semibold text-white mb-2">${dayName} - ${new Date(date).toLocaleDateString('pt-BR')}</h5>
                        ${appointments.length === 0 ? 
                            '<p class="text-white/70 text-sm">Nenhum agendamento</p>' :
                            appointments.map(apt => `
                                <div class="bg-white/10 rounded p-2 mb-2">
                                    <p class="text-white font-semibold">${apt.time} - ${apt.service}</p>
                                    <p class="text-white/80 text-sm">Cliente: ${apt.clientName}</p>
                                    <p class="text-white/80 text-sm">Telefone: ${apt.clientPhone}</p>
                                    <p class="text-green-300 text-sm">Valor: R$ ${apt.price.toFixed(2).replace('.', ',')}</p>
                                </div>
                            `).join('')
                        }
                    </div>
                `;
            }
            
            scheduleHtml += '</div>';
            
            document.getElementById('professionalContent').innerHTML = `
                <div class="glass-container rounded-lg p-6">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-bold text-white">📊 Agenda da Semana</h3>
                        <button onclick="showGoogleCalendarManagement()" class="glass-container text-white px-4 py-2 rounded-lg font-semibold hover:bg-white/20 transition-colors">
                            ← Voltar
                        </button>
                    </div>
                    ${scheduleHtml}
                </div>
            `;
        }

        async function viewScheduleForDate(date) {
            const appointments = await getAppointmentsForDate(date);
            
            document.getElementById('professionalContent').innerHTML = `
                <div class="glass-container rounded-lg p-6">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-bold text-white">📅 Agenda - ${new Date(date).toLocaleDateString('pt-BR')}</h3>
                        <button onclick="showGoogleCalendarManagement()" class="glass-container text-white px-4 py-2 rounded-lg font-semibold hover:bg-white/20 transition-colors">
                            ← Voltar
                        </button>
                    </div>
                    
                    <div class="space-y-4">
                        ${appointments.length === 0 ? 
                            '<p class="text-white/70 text-center py-8">Nenhum agendamento para esta data</p>' :
                            appointments.map(apt => `
                                <div class="glass-container rounded-lg p-4">
                                    <div class="flex justify-between items-start">
                                        <div>
                                            <h4 class="font-semibold text-white">${apt.service}</h4>
                                            <p class="text-white/70">🕐 ${apt.time}</p>
                                            <p class="text-white/70">👤 ${apt.clientName}</p>
                                            <p class="text-white/70">📱 ${apt.clientPhone}</p>
                                            <p class="text-green-300 font-semibold">💰 R$ ${apt.price.toFixed(2).replace('.', ',')}</p>
                                            ${apt.notes ? `<p class="text-blue-300 text-sm">📝 ${apt.notes}</p>` : ''}
                                        </div>
                                        <div class="text-right">
                                            <span class="px-3 py-1 rounded-full text-sm ${apt.status === 'Concluído' ? 'bg-green-500/20 text-green-300' : 'bg-blue-500/20 text-blue-300'}">${apt.status}</span>
                                            <div class="mt-2 space-y-1">
                                                <button onclick="contactClient('${apt.clientPhone}')" class="bg-green-500 text-white px-3 py-1 rounded text-xs hover:bg-green-600 transition-colors block">
                                                    💬 WhatsApp
                                                </button>
                                                ${apt.status !== 'Concluído' ? `
                                                    <button onclick="markAsCompleted(${apt.id})" class="bg-blue-500 text-white px-3 py-1 rounded text-xs hover:bg-blue-600 transition-colors block">
                                                        ✅ Concluir
                                                    </button>
                                                ` : ''}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            `).join('')
                        }
                    </div>
                </div>
            `;
        }

        async function getAppointmentsForDate(date) {
            // Buscar agendamentos locais
            const localAppointments = clientsDatabase.flatMap(client => 
                (client.appointments || [])
                    .filter(apt => apt.date === date)
                    .map(apt => ({
                        ...apt,
                        clientName: client.name,
                        clientPhone: client.phone
                    }))
            );
            
            // TODO: Integrar com Google Calendar API para buscar eventos reais
            // Por enquanto, retorna apenas agendamentos locais
            return localAppointments;
        }

        async function syncGoogleCalendar() {
            showNotification('🔄 Sincronizando com Google Calendar...', 'info');
            
            try {
                // TODO: Implementar sincronização real com Google Calendar API
                // Por enquanto, simula a sincronização
                
                await new Promise(resolve => setTimeout(resolve, 2000));
                
                showNotification('✅ Sincronização concluída com sucesso!\n\n📧 Agenda: ' + GOOGLE_CALENDAR_CONFIG.calendarId + '\n🔒 Privacidade: Dados protegidos', 'success');
                
            } catch (error) {
                console.error('Erro na sincronização:', error);
                showNotification('❌ Erro na sincronização. Verifique as configurações da API.', 'error');
            }
        }

        // Professional Dashboard Functions - Gerenciamento de Produtos
        function showServices() {
            if (!currentUser || userType !== 'professional') {
                showNotification('❌ Acesso negado. Faça login como profissional.', 'error');
                return;
            }
            
            document.getElementById('professionalContent').innerHTML = `
                <div class="glass-container rounded-lg p-6">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-bold text-white">💅 Gerenciar Produtos do Catálogo</h3>
                        <button onclick="showAddServiceForm()" class="btn-primary px-4 py-2 rounded-lg font-semibold hover:scale-105 transition-all duration-300">
                            ➕ Adicionar Produto
                        </button>
                    </div>
                    
                    <div class="grid md:grid-cols-2 gap-4 max-h-96 overflow-y-auto">
                        ${services.map(service => `
                            <div class="glass-container rounded-lg p-4">
                                <div class="flex items-start gap-4">
                                    <img src="${service.image}" alt="${service.name}" class="w-16 h-16 object-cover rounded-lg" onerror="this.src='data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 64 64\\'%3E%3Crect fill=\\'%23f3f4f6\\' width=\\'64\\' height=\\'64\\'/%3E%3Ctext x=\\'50%25\\' y=\\'50%25\\' text-anchor=\\'middle\\' dy=\\'.3em\\' fill=\\'%236b7280\\' font-size=\\'8\\'%3E${service.name}%3C/text%3E%3C/svg%3E'">
                                    <div class="flex-1">
                                        <h4 class="font-semibold text-white">${service.name}</h4>
                                        <p class="text-white/70 text-sm capitalize">${service.category}</p>
                                        <p class="text-green-300 font-semibold">R$ ${service.price.toFixed(2).replace('.', ',')}</p>
                                        ${service.maintenance15 ? `<p class="text-blue-300 text-xs">Manutenção 15d: R$ ${service.maintenance15.toFixed(2).replace('.', ',')}</p>` : ''}
                                        ${service.maintenance20 ? `<p class="text-blue-300 text-xs">Manutenção 20d: R$ ${service.maintenance20.toFixed(2).replace('.', ',')}</p>` : ''}
                                    </div>
                                    <div class="flex flex-col gap-2">
                                        <button onclick="editService(${service.id})" class="bg-blue-500 text-white px-3 py-1 rounded text-xs hover:bg-blue-600 transition-colors">
                                            ✏️ Editar
                                        </button>
                                        <button onclick="deleteService(${service.id})" class="bg-red-500 text-white px-3 py-1 rounded text-xs hover:bg-red-600 transition-colors">
                                            🗑️ Excluir
                                        </button>
                                    </div>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;
        }

        function showImageModal(imageSrc, title) {
            const modal = document.getElementById('imageModal');
            const modalImage = document.getElementById('modalImage');
            const modalTitle = document.getElementById('modalImageTitle');
            
            modalImage.src = imageSrc;
            modalTitle.textContent = title;
            modal.classList.add('active');
        }

        function closeImageModal() {
            document.getElementById('imageModal').classList.remove('active');
        }

        function showAddServiceForm() {
            document.getElementById('professionalContent').innerHTML = `
                <div class="glass-container rounded-lg p-6 max-h-[90vh] overflow-y-auto">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-bold text-white">➕ Adicionar Novo Produto</h3>
                        <button onclick="showServices()" class="glass-container text-white px-4 py-2 rounded-lg font-semibold hover:bg-white/20 transition-colors">
                            ← Voltar
                        </button>
                    </div>
                    
                    <form onsubmit="addService(event)" class="space-y-6">
                        <!-- Informações Básicas -->
                        <div class="glass-container rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-4">📝 Informações Básicas</h4>
                            <div class="grid md:grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-white font-semibold mb-2">Nome do Produto *</label>
                                    <input type="text" id="serviceName" required class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                                </div>
                                
                                <div>
                                    <label class="block text-white font-semibold mb-2">Categoria *</label>
                                    <select id="serviceCategory" required class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                                        <option value="">Selecione uma categoria</option>
                                        <option value="cilios">Cílios</option>
                                        <option value="sobrancelha">Sobrancelhas</option>
                                        <option value="micropigmentacao">Micropigmentação</option>
                                        <option value="micropigmentacao-sobrancelhas">Micropigmentação - Sobrancelhas</option>
                                        <option value="micropigmentacao-olhos">Micropigmentação - Olhos</option>
                                        <option value="micropigmentacao-labios">Micropigmentação - Lábios</option>
                                    </select>
                                </div>
                            </div>
                            
                            <div class="mt-4">
                                <label class="block text-white font-semibold mb-2">Descrição *</label>
                                <textarea id="serviceDescription" required rows="3" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none" placeholder="Descrição do produto..."></textarea>
                            </div>
                        </div>

                        <!-- Preços -->
                        <div class="glass-container rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-4">💰 Preços</h4>
                            <div class="grid md:grid-cols-3 gap-4">
                                <div>
                                    <label class="block text-white font-semibold mb-2">Preço Principal (R$) *</label>
                                    <input type="number" id="servicePrice" required step="0.01" min="0" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                                </div>
                                
                                <div>
                                    <label class="block text-white font-semibold mb-2">Manutenção 15 dias (R$)</label>
                                    <input type="number" id="serviceMaintenance15" step="0.01" min="0" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                                </div>
                                
                                <div>
                                    <label class="block text-white font-semibold mb-2">Manutenção 20 dias (R$)</label>
                                    <input type="number" id="serviceMaintenance20" step="0.01" min="0" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                                </div>
                            </div>
                        </div>

                        <!-- Fotos do Produto -->
                        <div class="glass-container rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-4">📸 Fotos do Produto</h4>
                            
                            <div class="mb-4">
                                <label class="block text-white font-semibold mb-2">Foto Principal *</label>
                                <input type="file" id="serviceImage" accept="image/*" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                                <p class="text-white/70 text-sm mt-2">Foto principal que aparecerá no catálogo</p>
                            </div>

                            <div class="grid md:grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-white font-semibold mb-2">Foto de Detalhe 1</label>
                                    <input type="file" id="serviceDetailImage1" accept="image/*" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                                    <p class="text-white/70 text-sm mt-1">Foto adicional para mostrar detalhes</p>
                                </div>

                                <div>
                                    <label class="block text-white font-semibold mb-2">Foto de Detalhe 2</label>
                                    <input type="file" id="serviceDetailImage2" accept="image/*" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                                    <p class="text-white/70 text-sm mt-1">Segunda foto adicional para detalhes</p>
                                </div>
                            </div>
                            
                            <p class="text-white/70 text-sm mt-3">Formatos aceitos: JPG, PNG, WebP</p>
                        </div>

                        <!-- Pacotes Promocionais -->
                        <div class="glass-container rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-4">🎁 Pacotes Promocionais</h4>
                            <div id="addPackagesContainer">
                                <p class="text-white/70 text-center py-4">Nenhum pacote promocional cadastrado</p>
                            </div>
                            <button type="button" onclick="addNewPackage()" class="bg-green-500 text-white px-4 py-2 rounded-lg font-semibold hover:bg-green-600 transition-colors">
                                ➕ Adicionar Pacote
                            </button>
                        </div>
                        
                        <button type="submit" class="w-full btn-primary py-4 rounded-xl text-lg font-bold hover:scale-105 transition-all duration-300 shadow-lg">
                            ✨ Adicionar Produto ao Catálogo
                        </button>
                    </form>
                </div>
            `;
        }

        function addNewPackage() {
            const container = document.getElementById('addPackagesContainer');
            const packageCount = container.querySelectorAll('.package-item').length;
            
            const packageHtml = `
                <div class="package-item bg-white/10 rounded-lg p-4 mb-4" data-index="${packageCount}">
                    <div class="flex justify-between items-center mb-3">
                        <h5 class="text-white font-semibold">Pacote ${packageCount + 1}</h5>
                        <button type="button" onclick="removeNewPackage(${packageCount})" class="bg-red-500 text-white px-3 py-1 rounded text-xs hover:bg-red-600 transition-colors">
                            🗑️ Remover
                        </button>
                    </div>
                    <div class="grid md:grid-cols-2 gap-4 mb-3">
                        <div>
                            <label class="block text-white font-semibold mb-2">Nome do Pacote</label>
                            <input type="text" class="package-name form-input w-full rounded-lg px-4 py-3 focus:outline-none" placeholder="Ex: Pacote Completo">
                        </div>
                        <div>
                            <label class="block text-white font-semibold mb-2">Preço (R$)</label>
                            <input type="number" class="package-price form-input w-full rounded-lg px-4 py-3 focus:outline-none" step="0.01" min="0" placeholder="0.00">
                        </div>
                    </div>
                    <div>
                        <label class="block text-white font-semibold mb-2">Descrição do Pacote</label>
                        <textarea class="package-description form-input w-full rounded-lg px-4 py-3 focus:outline-none" rows="2" placeholder="Descreva o que inclui no pacote..."></textarea>
                    </div>
                </div>
            `;
            
            // Remove "no packages" message if exists
            const noPackagesMsg = container.querySelector('p');
            if (noPackagesMsg) {
                noPackagesMsg.remove();
            }
            
            container.insertAdjacentHTML('beforeend', packageHtml);
        }

        function removeNewPackage(index) {
            const packageItem = document.querySelector(`.package-item[data-index="${index}"]`);
            if (packageItem) {
                packageItem.remove();
                
                // Check if no packages left
                const container = document.getElementById('addPackagesContainer');
                if (container.querySelectorAll('.package-item').length === 0) {
                    container.innerHTML = '<p class="text-white/70 text-center py-4">Nenhum pacote promocional cadastrado</p>';
                }
            }
        }

        function addService(event) {
            event.preventDefault();
            
            const name = document.getElementById('serviceName').value.trim();
            const category = document.getElementById('serviceCategory').value;
            const description = document.getElementById('serviceDescription').value.trim();
            const price = parseFloat(document.getElementById('servicePrice').value);
            const maintenance15 = document.getElementById('serviceMaintenance15').value ? parseFloat(document.getElementById('serviceMaintenance15').value) : null;
            const maintenance20 = document.getElementById('serviceMaintenance20').value ? parseFloat(document.getElementById('serviceMaintenance20').value) : null;
            
            // Image files
            const imageFile = document.getElementById('serviceImage').files[0];
            const detailImage1File = document.getElementById('serviceDetailImage1').files[0];
            const detailImage2File = document.getElementById('serviceDetailImage2').files[0];
            
            // Collect packages data
            const packages = [];
            document.querySelectorAll('#addPackagesContainer .package-item').forEach(item => {
                const name = item.querySelector('.package-name').value.trim();
                const price = parseFloat(item.querySelector('.package-price').value);
                const description = item.querySelector('.package-description').value.trim();
                
                if (name && price && description) {
                    packages.push({ name, price, description });
                }
            });
            
            if (!name || !category || !description || !price) {
                showNotification('❌ Por favor, preencha todos os campos obrigatórios', 'error');
                return;
            }
            
            const newService = {
                id: Date.now(),
                name: name,
                category: category,
                description: description + " ✨ NOVOS CLIENTES: 10% DE DESCONTO!",
                price: price,
                packages: packages,
                createdAt: new Date().toISOString()
            };
            
            if (maintenance15) newService.maintenance15 = maintenance15;
            if (maintenance20) newService.maintenance20 = maintenance20;
            
            // Handle image uploads
            let imagesToProcess = 0;
            let imagesProcessed = 0;
            
            if (imageFile) imagesToProcess++;
            if (detailImage1File) imagesToProcess++;
            if (detailImage2File) imagesToProcess++;
            
            if (imagesToProcess === 0) {
                // No images to process, use default image
                newService.image = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 200'%3E%3Crect fill='%23667eea' width='200' height='200'/%3E%3Ctext x='50%25' y='50%25' text-anchor='middle' dy='.3em' fill='white' font-size='14'%3E" + encodeURIComponent(name) + "%3C/text%3E%3C/svg%3E";
                services.push(newService);
                saveServicesToStorage();
                renderServices();
                showServices();
                showNotification('✅ Produto adicionado com sucesso ao catálogo!', 'success');
                return;
            }
            
            showNotification('📤 Processando imagens do produto...', 'info');
            
            function checkAllImagesProcessed() {
                imagesProcessed++;
                if (imagesProcessed === imagesToProcess) {
                    services.push(newService);
                    saveServicesToStorage();
                    renderServices();
                    showServices();
                    showNotification('✅ Produto e imagens salvos permanentemente no catálogo!', 'success');
                }
            }
            
            // Process main image
            if (imageFile) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    newService.image = e.target.result;
                    newService.imageName = imageFile.name;
                    newService.imageSize = imageFile.size;
                    checkAllImagesProcessed();
                };
                reader.readAsDataURL(imageFile);
            } else {
                // Set default image if no main image provided
                newService.image = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 200'%3E%3Crect fill='%23667eea' width='200' height='200'/%3E%3Ctext x='50%25' y='50%25' text-anchor='middle' dy='.3em' fill='white' font-size='14'%3E" + encodeURIComponent(name) + "%3C/text%3E%3C/svg%3E";
            }
            
            // Process detail image 1
            if (detailImage1File) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    newService.detailImage1 = e.target.result;
                    newService.detailImage1Name = detailImage1File.name;
                    newService.detailImage1Size = detailImage1File.size;
                    checkAllImagesProcessed();
                };
                reader.readAsDataURL(detailImage1File);
            }
            
            // Process detail image 2
            if (detailImage2File) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    newService.detailImage2 = e.target.result;
                    newService.detailImage2Name = detailImage2File.name;
                    newService.detailImage2Size = detailImage2File.size;
                    checkAllImagesProcessed();
                };
                reader.readAsDataURL(detailImage2File);
            }
        }

        function editService(serviceId) {
            const service = services.find(s => s.id === serviceId);
            if (!service) return;
            
            document.getElementById('professionalContent').innerHTML = `
                <div class="glass-container rounded-lg p-6 max-h-[90vh] overflow-y-auto">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-bold text-white">✏️ Editar Produto</h3>
                        <button onclick="showServices()" class="glass-container text-white px-4 py-2 rounded-lg font-semibold hover:bg-white/20 transition-colors">
                            ← Voltar
                        </button>
                    </div>
                    
                    <form onsubmit="updateService(event, ${serviceId})" class="space-y-6">
                        <!-- Informações Básicas -->
                        <div class="glass-container rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-4">📝 Informações Básicas</h4>
                            <div class="grid md:grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-white font-semibold mb-2">Nome do Produto *</label>
                                    <input type="text" id="editServiceName" required value="${service.name}" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                                </div>
                                
                                <div>
                                    <label class="block text-white font-semibold mb-2">Categoria *</label>
                                    <select id="editServiceCategory" required class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                                        <option value="cilios" ${service.category === 'cilios' ? 'selected' : ''}>Cílios</option>
                                        <option value="sobrancelha" ${service.category === 'sobrancelha' ? 'selected' : ''}>Sobrancelhas</option>
                                        <option value="micropigmentacao" ${service.category === 'micropigmentacao' ? 'selected' : ''}>Micropigmentação</option>
                                        <option value="micropigmentacao-sobrancelhas" ${service.category === 'micropigmentacao-sobrancelhas' ? 'selected' : ''}>Micropigmentação - Sobrancelhas</option>
                                        <option value="micropigmentacao-olhos" ${service.category === 'micropigmentacao-olhos' ? 'selected' : ''}>Micropigmentação - Olhos</option>
                                        <option value="micropigmentacao-labios" ${service.category === 'micropigmentacao-labios' ? 'selected' : ''}>Micropigmentação - Lábios</option>
                                    </select>
                                </div>
                            </div>
                            
                            <div class="mt-4">
                                <label class="block text-white font-semibold mb-2">Descrição *</label>
                                <textarea id="editServiceDescription" required rows="3" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">${service.description.replace(' ✨ NOVOS CLIENTES: 10% DE DESCONTO!', '')}</textarea>
                            </div>
                        </div>

                        <!-- Preços -->
                        <div class="glass-container rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-4">💰 Preços</h4>
                            <div class="grid md:grid-cols-3 gap-4">
                                <div>
                                    <label class="block text-white font-semibold mb-2">Preço Principal (R$) *</label>
                                    <input type="number" id="editServicePrice" required step="0.01" min="0" value="${service.price}" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                                </div>
                                
                                <div>
                                    <label class="block text-white font-semibold mb-2">Manutenção 15 dias (R$)</label>
                                    <input type="number" id="editServiceMaintenance15" step="0.01" min="0" value="${service.maintenance15 || ''}" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                                </div>
                                
                                <div>
                                    <label class="block text-white font-semibold mb-2">Manutenção 20 dias (R$)</label>
                                    <input type="number" id="editServiceMaintenance20" step="0.01" min="0" value="${service.maintenance20 || ''}" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                                </div>
                            </div>
                        </div>

                        <!-- Fotos do Produto -->
                        <div class="glass-container rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-4">📸 Fotos do Produto</h4>
                            
                            <!-- Foto Principal -->
                            <div class="mb-4">
                                <label class="block text-white font-semibold mb-2">Foto Principal</label>
                                <div class="flex items-center gap-4 mb-2">
                                    <div class="w-20 h-20 rounded-lg overflow-hidden border-2 border-white/30">
                                        <img src="${service.image}" alt="Foto atual" class="w-full h-full object-cover" onerror="this.src='data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 80 80\\'%3E%3Crect fill=\\'%23f3f4f6\\' width=\\'80\\' height=\\'80\\'/%3E%3Ctext x=\\'50%25\\' y=\\'50%25\\' text-anchor=\\'middle\\' dy=\\'.3em\\' fill=\\'%236b7280\\' font-size=\\'10\\'%3EFoto%3C/text%3E%3C/svg%3E'">
                                    </div>
                                    <div class="flex-1">
                                        <input type="file" id="editServiceImage" accept="image/*" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                                        <p class="text-white/70 text-sm mt-1">Deixe em branco para manter a foto atual</p>
                                    </div>
                                </div>
                            </div>

                            <!-- Fotos de Detalhes -->
                            <div class="grid md:grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-white font-semibold mb-2">Foto de Detalhe 1</label>
                                    <div class="mb-2">
                                        ${service.detailImage1 ? `
                                            <div class="w-20 h-20 rounded-lg overflow-hidden border-2 border-white/30 mb-2">
                                                <img src="${service.detailImage1}" alt="Detalhe 1" class="w-full h-full object-cover">
                                            </div>
                                        ` : ''}
                                        <input type="file" id="editServiceDetailImage1" accept="image/*" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                                        <p class="text-white/70 text-sm mt-1">Foto adicional para mostrar detalhes</p>
                                    </div>
                                </div>

                                <div>
                                    <label class="block text-white font-semibold mb-2">Foto de Detalhe 2</label>
                                    <div class="mb-2">
                                        ${service.detailImage2 ? `
                                            <div class="w-20 h-20 rounded-lg overflow-hidden border-2 border-white/30 mb-2">
                                                <img src="${service.detailImage2}" alt="Detalhe 2" class="w-full h-full object-cover">
                                            </div>
                                        ` : ''}
                                        <input type="file" id="editServiceDetailImage2" accept="image/*" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                                        <p class="text-white/70 text-sm mt-1">Segunda foto adicional para detalhes</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Pacotes Promocionais -->
                        <div class="glass-container rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-4">🎁 Pacotes Promocionais</h4>
                            <div id="editPackagesContainer">
                                ${service.packages && service.packages.length > 0 ? 
                                    service.packages.map((pkg, index) => `
                                        <div class="package-item bg-white/10 rounded-lg p-4 mb-4" data-index="${index}">
                                            <div class="flex justify-between items-center mb-3">
                                                <h5 class="text-white font-semibold">Pacote ${index + 1}</h5>
                                                <button type="button" onclick="removePackage(${index})" class="bg-red-500 text-white px-3 py-1 rounded text-xs hover:bg-red-600 transition-colors">
                                                    🗑️ Remover
                                                </button>
                                            </div>
                                            <div class="grid md:grid-cols-2 gap-4 mb-3">
                                                <div>
                                                    <label class="block text-white font-semibold mb-2">Nome do Pacote</label>
                                                    <input type="text" class="package-name form-input w-full rounded-lg px-4 py-3 focus:outline-none" value="${pkg.name}" placeholder="Ex: Pacote Completo">
                                                </div>
                                                <div>
                                                    <label class="block text-white font-semibold mb-2">Preço (R$)</label>
                                                    <input type="number" class="package-price form-input w-full rounded-lg px-4 py-3 focus:outline-none" value="${pkg.price}" step="0.01" min="0" placeholder="0.00">
                                                </div>
                                            </div>
                                            <div>
                                                <label class="block text-white font-semibold mb-2">Descrição do Pacote</label>
                                                <textarea class="package-description form-input w-full rounded-lg px-4 py-3 focus:outline-none" rows="2" placeholder="Descreva o que inclui no pacote...">${pkg.description}</textarea>
                                            </div>
                                        </div>
                                    `).join('') :
                                    '<p class="text-white/70 text-center py-4">Nenhum pacote promocional cadastrado</p>'
                                }
                            </div>
                            <button type="button" onclick="addPackage()" class="bg-green-500 text-white px-4 py-2 rounded-lg font-semibold hover:bg-green-600 transition-colors">
                                ➕ Adicionar Pacote
                            </button>
                        </div>
                        
                        <button type="submit" class="w-full btn-primary py-4 rounded-xl text-lg font-bold hover:scale-105 transition-all duration-300 shadow-lg">
                            ✨ Salvar Alterações
                        </button>
                    </form>
                </div>
            `;
        }

        function addPackage() {
            const container = document.getElementById('editPackagesContainer');
            const packageCount = container.querySelectorAll('.package-item').length;
            
            const packageHtml = `
                <div class="package-item bg-white/10 rounded-lg p-4 mb-4" data-index="${packageCount}">
                    <div class="flex justify-between items-center mb-3">
                        <h5 class="text-white font-semibold">Pacote ${packageCount + 1}</h5>
                        <button type="button" onclick="removePackage(${packageCount})" class="bg-red-500 text-white px-3 py-1 rounded text-xs hover:bg-red-600 transition-colors">
                            🗑️ Remover
                        </button>
                    </div>
                    <div class="grid md:grid-cols-2 gap-4 mb-3">
                        <div>
                            <label class="block text-white font-semibold mb-2">Nome do Pacote</label>
                            <input type="text" class="package-name form-input w-full rounded-lg px-4 py-3 focus:outline-none" placeholder="Ex: Pacote Completo">
                        </div>
                        <div>
                            <label class="block text-white font-semibold mb-2">Preço (R$)</label>
                            <input type="number" class="package-price form-input w-full rounded-lg px-4 py-3 focus:outline-none" step="0.01" min="0" placeholder="0.00">
                        </div>
                    </div>
                    <div>
                        <label class="block text-white font-semibold mb-2">Descrição do Pacote</label>
                        <textarea class="package-description form-input w-full rounded-lg px-4 py-3 focus:outline-none" rows="2" placeholder="Descreva o que inclui no pacote..."></textarea>
                    </div>
                </div>
            `;
            
            // Remove "no packages" message if exists
            const noPackagesMsg = container.querySelector('p');
            if (noPackagesMsg) {
                noPackagesMsg.remove();
            }
            
            container.insertAdjacentHTML('beforeend', packageHtml);
        }

        function removePackage(index) {
            const packageItem = document.querySelector(`.package-item[data-index="${index}"]`);
            if (packageItem) {
                packageItem.remove();
                
                // Check if no packages left
                const container = document.getElementById('editPackagesContainer');
                if (container.querySelectorAll('.package-item').length === 0) {
                    container.innerHTML = '<p class="text-white/70 text-center py-4">Nenhum pacote promocional cadastrado</p>';
                }
            }
        }

        function updateService(event, serviceId) {
            event.preventDefault();
            
            const serviceIndex = services.findIndex(s => s.id === serviceId);
            if (serviceIndex === -1) return;
            
            const name = document.getElementById('editServiceName').value.trim();
            const category = document.getElementById('editServiceCategory').value;
            const description = document.getElementById('editServiceDescription').value.trim();
            const price = parseFloat(document.getElementById('editServicePrice').value);
            const maintenance15 = document.getElementById('editServiceMaintenance15').value ? parseFloat(document.getElementById('editServiceMaintenance15').value) : null;
            const maintenance20 = document.getElementById('editServiceMaintenance20').value ? parseFloat(document.getElementById('editServiceMaintenance20').value) : null;
            
            // Image files
            const imageFile = document.getElementById('editServiceImage').files[0];
            const detailImage1File = document.getElementById('editServiceDetailImage1').files[0];
            const detailImage2File = document.getElementById('editServiceDetailImage2').files[0];
            
            // Collect packages data
            const packages = [];
            document.querySelectorAll('.package-item').forEach(item => {
                const name = item.querySelector('.package-name').value.trim();
                const price = parseFloat(item.querySelector('.package-price').value);
                const description = item.querySelector('.package-description').value.trim();
                
                if (name && price && description) {
                    packages.push({ name, price, description });
                }
            });
            
            if (!name || !category || !description || !price) {
                showNotification('❌ Por favor, preencha todos os campos obrigatórios', 'error');
                return;
            }
            
            // Update basic service data
            services[serviceIndex].name = name;
            services[serviceIndex].category = category;
            services[serviceIndex].description = description + " ✨ NOVOS CLIENTES: 10% DE DESCONTO!";
            services[serviceIndex].price = price;
            services[serviceIndex].packages = packages;
            services[serviceIndex].updatedAt = new Date().toISOString();
            
            if (maintenance15) {
                services[serviceIndex].maintenance15 = maintenance15;
            } else {
                delete services[serviceIndex].maintenance15;
            }
            
            if (maintenance20) {
                services[serviceIndex].maintenance20 = maintenance20;
            } else {
                delete services[serviceIndex].maintenance20;
            }
            
            // Handle image uploads
            let imagesToProcess = 0;
            let imagesProcessed = 0;
            
            if (imageFile) imagesToProcess++;
            if (detailImage1File) imagesToProcess++;
            if (detailImage2File) imagesToProcess++;
            
            if (imagesToProcess === 0) {
                // No images to process, save immediately
                saveServicesToStorage();
                renderServices();
                showServices();
                showNotification('✅ Produto atualizado com sucesso!', 'success');
                return;
            }
            
            showNotification('📤 Processando imagens do produto...', 'info');
            
            function checkAllImagesProcessed() {
                imagesProcessed++;
                if (imagesProcessed === imagesToProcess) {
                    saveServicesToStorage();
                    renderServices();
                    showServices();
                    showNotification('✅ Produto e imagens atualizados permanentemente!', 'success');
                }
            }
            
            // Process main image
            if (imageFile) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    services[serviceIndex].image = e.target.result;
                    services[serviceIndex].imageName = imageFile.name;
                    services[serviceIndex].imageSize = imageFile.size;
                    checkAllImagesProcessed();
                };
                reader.readAsDataURL(imageFile);
            }
            
            // Process detail image 1
            if (detailImage1File) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    services[serviceIndex].detailImage1 = e.target.result;
                    services[serviceIndex].detailImage1Name = detailImage1File.name;
                    services[serviceIndex].detailImage1Size = detailImage1File.size;
                    checkAllImagesProcessed();
                };
                reader.readAsDataURL(detailImage1File);
            }
            
            // Process detail image 2
            if (detailImage2File) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    services[serviceIndex].detailImage2 = e.target.result;
                    services[serviceIndex].detailImage2Name = detailImage2File.name;
                    services[serviceIndex].detailImage2Size = detailImage2File.size;
                    checkAllImagesProcessed();
                };
                reader.readAsDataURL(detailImage2File);
            }
        }

        function deleteService(serviceId) {
            const service = services.find(s => s.id === serviceId);
            if (!service) return;
            
            if (confirm(`Tem certeza que deseja excluir o produto "${service.name}"?\n\nEsta ação não pode ser desfeita.`)) {
                const serviceIndex = services.findIndex(s => s.id === serviceId);
                services.splice(serviceIndex, 1);
                saveServicesToStorage();
                renderServices();
                showServices();
                showNotification('✅ Produto excluído permanentemente do catálogo!', 'success');
            }
        }

        // Complete Data Persistence System
        const STORAGE_KEYS = {
            services: 'catalogServices',
            clients: 'catalogClients',
            appointments: 'catalogAppointments',
            background: 'catalogBackground',
            backgroundDate: 'catalogBackgroundDate',
            backgroundName: 'catalogBackgroundName',
            lastUpdate: 'catalogLastUpdate',
            dataVersion: 'catalogDataVersion'
        };

        const DATA_VERSION = '2.0'; // Version control for data structure

        // Auto-save system
        let autoSaveTimer = null;
        function scheduleAutoSave() {
            if (autoSaveTimer) clearTimeout(autoSaveTimer);
            autoSaveTimer = setTimeout(() => {
                saveAllDataToStorage();
            }, 2000); // Save 2 seconds after last change
        }

        // Complete data save function
        function saveAllDataToStorage() {
            try {
                const dataToSave = {
                    services: services,
                    clients: clientsDatabase,
                    appointments: getAllAppointments(),
                    version: DATA_VERSION,
                    lastUpdate: new Date().toISOString(),
                    totalServices: services.length,
                    totalClients: clientsDatabase.length,
                    totalImages: countTotalImages()
                };

                // Save main data
                localStorage.setItem(STORAGE_KEYS.services, JSON.stringify(services));
                localStorage.setItem(STORAGE_KEYS.clients, JSON.stringify(clientsDatabase));
                localStorage.setItem(STORAGE_KEYS.lastUpdate, dataToSave.lastUpdate);
                localStorage.setItem(STORAGE_KEYS.dataVersion, DATA_VERSION);

                // Calculate storage usage
                const storageUsed = calculateStorageUsage();
                
                console.log('💾 SISTEMA DE PERSISTÊNCIA - Dados salvos com sucesso!');
                console.log(`📊 Estatísticas de armazenamento:`);
                console.log(`   • Serviços: ${services.length}`);
                console.log(`   • Clientes: ${clientsDatabase.length}`);
                console.log(`   • Imagens: ${countTotalImages()}`);
                console.log(`   • Espaço usado: ${storageUsed.used}MB de ${storageUsed.total}MB`);
                console.log(`   • Última atualização: ${new Date().toLocaleString('pt-BR')}`);

                return true;
            } catch (error) {
                console.error('❌ Erro ao salvar dados:', error);
                
                if (error.name === 'QuotaExceededError') {
                    showNotification('⚠️ Espaço de armazenamento esgotado!\n\nConsidere remover imagens antigas ou dados desnecessários.', 'warning');
                    showStorageCleanupOptions();
                } else {
                    showNotification('❌ Erro ao salvar alterações. Dados podem ser perdidos.', 'error');
                }
                return false;
            }
        }

        // Complete data load function
        function loadAllDataFromStorage() {
            try {
                console.log('🔄 Carregando dados salvos...');

                // Load services
                const savedServices = localStorage.getItem(STORAGE_KEYS.services);
                if (savedServices) {
                    const parsedServices = JSON.parse(savedServices);
                    
                    // Validate and merge services
                    const validServices = parsedServices.filter(service => 
                        service.id && service.name && service.price && service.category
                    );
                    
                    // Keep saved services and add new default ones
                    const savedServiceIds = validServices.map(s => s.id);
                    services = [
                        ...validServices,
                        ...services.filter(s => !savedServiceIds.includes(s.id))
                    ];
                    
                    console.log(`✅ Serviços carregados: ${validServices.length} salvos + ${services.length - validServices.length} padrão`);
                }

                // Load clients
                const savedClients = localStorage.getItem(STORAGE_KEYS.clients);
                if (savedClients) {
                    const parsedClients = JSON.parse(savedClients);
                    
                    // Validate clients data
                    const validClients = parsedClients.filter(client => 
                        client.name && client.cpf && client.phone
                    );
                    
                    // Merge with existing clients (avoid duplicates)
                    validClients.forEach(savedClient => {
                        const existingIndex = clientsDatabase.findIndex(c => 
                            c.cpf === savedClient.cpf || c.phone === savedClient.phone
                        );
                        
                        if (existingIndex >= 0) {
                            // Update existing client with saved data
                            clientsDatabase[existingIndex] = { ...clientsDatabase[existingIndex], ...savedClient };
                        } else {
                            // Add new client
                            clientsDatabase.push(savedClient);
                        }
                    });
                    
                    console.log(`✅ Clientes carregados: ${validClients.length}`);
                }

                // Load background
                const savedBackground = localStorage.getItem(STORAGE_KEYS.background);
                if (savedBackground && savedBackground !== 'default') {
                    document.body.style.background = `url('${savedBackground}') center/cover fixed`;
                    document.body.classList.add('has-custom-bg');
                    console.log('✅ Fundo personalizado aplicado');
                }

                // Show load summary
                const lastUpdate = localStorage.getItem(STORAGE_KEYS.lastUpdate);
                const storageUsed = calculateStorageUsage();
                
                console.log('🎉 DADOS CARREGADOS COM SUCESSO!');
                console.log(`📊 Resumo do carregamento:`);
                console.log(`   • Serviços: ${services.length}`);
                console.log(`   • Clientes: ${clientsDatabase.length}`);
                console.log(`   • Imagens: ${countTotalImages()}`);
                console.log(`   • Última atualização: ${lastUpdate ? new Date(lastUpdate).toLocaleString('pt-BR') : 'Primeira vez'}`);
                console.log(`   • Espaço usado: ${storageUsed.used}MB`);

                return true;
            } catch (error) {
                console.error('❌ Erro ao carregar dados:', error);
                showNotification('⚠️ Erro ao carregar dados salvos. Usando dados padrão.', 'warning');
                return false;
            }
        }

        // Storage utility functions
        function calculateStorageUsage() {
            let totalSize = 0;
            let usedSize = 0;
            
            try {
                // Calculate used storage
                for (let key in localStorage) {
                    if (localStorage.hasOwnProperty(key)) {
                        usedSize += localStorage[key].length;
                    }
                }
                
                // Estimate total available (usually 5-10MB)
                totalSize = 10 * 1024 * 1024; // 10MB estimate
                
                return {
                    used: (usedSize / (1024 * 1024)).toFixed(2),
                    total: (totalSize / (1024 * 1024)).toFixed(2),
                    percentage: ((usedSize / totalSize) * 100).toFixed(1)
                };
            } catch (error) {
                return { used: 'N/A', total: 'N/A', percentage: 'N/A' };
            }
        }

        function countTotalImages() {
            let imageCount = 0;
            
            services.forEach(service => {
                if (service.image && service.image.startsWith('data:image/')) imageCount++;
                if (service.detailImage1 && service.detailImage1.startsWith('data:image/')) imageCount++;
                if (service.detailImage2 && service.detailImage2.startsWith('data:image/')) imageCount++;
            });
            
            // Count background image
            const background = localStorage.getItem(STORAGE_KEYS.background);
            if (background && background.startsWith('data:image/')) imageCount++;
            
            return imageCount;
        }

        function getAllAppointments() {
            return clientsDatabase.flatMap(client => 
                (client.appointments || []).map(apt => ({
                    ...apt,
                    clientName: client.name,
                    clientCpf: client.cpf,
                    clientPhone: client.phone
                }))
            );
        }

        // Storage Management Functions
        function showStorageManagement() {
            if (!currentUser || userType !== 'professional') {
                showNotification('❌ Acesso negado. Faça login como profissional.', 'error');
                return;
            }
            
            const storageUsed = calculateStorageUsage();
            const imageCount = countTotalImages();
            const lastUpdate = localStorage.getItem(STORAGE_KEYS.lastUpdate);
            
            document.getElementById('professionalContent').innerHTML = `
                <div class="glass-container rounded-lg p-6">
                    <h3 class="text-xl font-bold text-white mb-6">💾 Gerenciamento de Armazenamento</h3>
                    
                    <!-- Status do Armazenamento -->
                    <div class="grid md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                        <div class="glass-container rounded-lg p-4 text-center">
                            <div class="text-2xl font-bold text-blue-400">${storageUsed.used}MB</div>
                            <div class="text-white/70 text-sm">Espaço Usado</div>
                        </div>
                        
                        <div class="glass-container rounded-lg p-4 text-center">
                            <div class="text-2xl font-bold text-green-400">${imageCount}</div>
                            <div class="text-white/70 text-sm">Imagens Salvas</div>
                        </div>
                        
                        <div class="glass-container rounded-lg p-4 text-center">
                            <div class="text-2xl font-bold text-purple-400">${services.length}</div>
                            <div class="text-white/70 text-sm">Produtos</div>
                        </div>
                        
                        <div class="glass-container rounded-lg p-4 text-center">
                            <div class="text-2xl font-bold text-yellow-400">${clientsDatabase.length}</div>
                            <div class="text-white/70 text-sm">Clientes</div>
                        </div>
                    </div>
                    
                    <!-- Barra de Progresso -->
                    <div class="glass-container rounded-lg p-4 mb-6">
                        <h4 class="text-lg font-semibold text-white mb-3">📊 Uso do Armazenamento</h4>
                        <div class="w-full bg-gray-700 rounded-full h-4 mb-2">
                            <div class="bg-gradient-to-r from-green-400 to-blue-500 h-4 rounded-full transition-all duration-500" style="width: ${Math.min(parseFloat(storageUsed.percentage), 100)}%"></div>
                        </div>
                        <div class="flex justify-between text-white/80 text-sm">
                            <span>${storageUsed.used}MB usado</span>
                            <span>${storageUsed.percentage}% do total</span>
                            <span>${storageUsed.total}MB disponível</span>
                        </div>
                    </div>
                    
                    <!-- Informações Detalhadas -->
                    <div class="grid md:grid-cols-2 gap-6 mb-6">
                        <div class="glass-container rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">📈 Estatísticas Detalhadas</h4>
                            <div class="space-y-2 text-white/80">
                                <div class="flex justify-between">
                                    <span>Produtos com imagens:</span>
                                    <span class="font-semibold">${services.filter(s => s.image && s.image.startsWith('data:image/')).length}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span>Fotos de detalhes:</span>
                                    <span class="font-semibold">${services.filter(s => s.detailImage1 || s.detailImage2).length}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span>Agendamentos totais:</span>
                                    <span class="font-semibold">${getAllAppointments().length}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span>Última atualização:</span>
                                    <span class="font-semibold">${lastUpdate ? new Date(lastUpdate).toLocaleDateString('pt-BR') : 'N/A'}</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="glass-container rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">🔧 Ações Rápidas</h4>
                            <div class="space-y-3">
                                <button onclick="checkDataIntegrity()" class="w-full bg-blue-500 text-white px-4 py-2 rounded-lg font-semibold hover:bg-blue-600 transition-colors">
                                    🔍 Verificar Integridade
                                </button>
                                <button onclick="saveAllDataToStorage()" class="w-full bg-green-500 text-white px-4 py-2 rounded-lg font-semibold hover:bg-green-600 transition-colors">
                                    💾 Salvar Tudo Agora
                                </button>
                                <button onclick="exportDataBackup()" class="w-full bg-purple-500 text-white px-4 py-2 rounded-lg font-semibold hover:bg-purple-600 transition-colors">
                                    📦 Exportar Backup
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Ferramentas de Limpeza -->
                    <div class="glass-container rounded-lg p-4 mb-6">
                        <h4 class="text-lg font-semibold text-white mb-3">🧹 Ferramentas de Limpeza</h4>
                        <div class="grid md:grid-cols-3 gap-4">
                            <button onclick="cleanupOldImages()" class="bg-orange-500 text-white px-4 py-3 rounded-lg font-semibold hover:bg-orange-600 transition-colors">
                                🖼️ Limpar Imagens Antigas
                            </button>
                            <button onclick="cleanupOldAppointments()" class="bg-yellow-500 text-white px-4 py-3 rounded-lg font-semibold hover:bg-yellow-600 transition-colors">
                                📅 Limpar Agendamentos Antigos
                            </button>
                            <button onclick="showStorageCleanupOptions()" class="bg-red-500 text-white px-4 py-3 rounded-lg font-semibold hover:bg-red-600 transition-colors">
                                🗑️ Limpeza Avançada
                            </button>
                        </div>
                    </div>
                    
                    <!-- Sistema de Auto-Save -->
                    <div class="glass-container rounded-lg p-4">
                        <h4 class="text-lg font-semibold text-white mb-3">⚡ Sistema de Auto-Save</h4>
                        <div class="text-white/80 space-y-2">
                            <div class="flex items-center gap-2">
                                <div class="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
                                <span>Sistema de salvamento automático ativo</span>
                            </div>
                            <p class="text-sm">• Todas as alterações são salvas automaticamente após 2 segundos</p>
                            <p class="text-sm">• Imagens são convertidas para Base64 e armazenadas permanentemente</p>
                            <p class="text-sm">• Dados ficam salvos até você alterá-los manualmente</p>
                            <p class="text-sm">• Sistema detecta automaticamente quando o espaço está acabando</p>
                        </div>
                    </div>
                </div>
            `;
        }

        // Storage cleanup functions
        function showStorageCleanupOptions() {
            if (!currentUser || userType !== 'professional') return;
            
            const storageUsed = calculateStorageUsage();
            const imageCount = countTotalImages();
            
            document.getElementById('professionalContent').innerHTML = `
                <div class="glass-container rounded-lg p-6">
                    <h3 class="text-xl font-bold text-white mb-6">🧹 Limpeza de Armazenamento</h3>
                    
                    <div class="glass-container rounded-lg p-4 mb-6 border-l-4 border-yellow-400">
                        <h4 class="text-lg font-semibold text-white mb-3">⚠️ Espaço de Armazenamento Esgotado</h4>
                        <div class="text-white/80 space-y-2">
                            <p><strong>Espaço usado:</strong> ${storageUsed.used}MB de ${storageUsed.total}MB (${storageUsed.percentage}%)</p>
                            <p><strong>Total de imagens:</strong> ${imageCount}</p>
                            <p><strong>Serviços:</strong> ${services.length}</p>
                            <p><strong>Clientes:</strong> ${clientsDatabase.length}</p>
                        </div>
                    </div>
                    
                    <div class="grid md:grid-cols-2 gap-4 mb-6">
                        <button onclick="cleanupOldImages()" class="bg-orange-500 text-white px-4 py-3 rounded-lg font-semibold hover:bg-orange-600 transition-colors">
                            🖼️ Limpar Imagens Antigas
                        </button>
                        <button onclick="cleanupOldAppointments()" class="bg-blue-500 text-white px-4 py-3 rounded-lg font-semibold hover:bg-blue-600 transition-colors">
                            📅 Limpar Agendamentos Antigos
                        </button>
                        <button onclick="exportDataBackup()" class="bg-green-500 text-white px-4 py-3 rounded-lg font-semibold hover:bg-green-600 transition-colors">
                            💾 Exportar Backup
                        </button>
                        <button onclick="resetAllData()" class="bg-red-500 text-white px-4 py-3 rounded-lg font-semibold hover:bg-red-600 transition-colors">
                            🗑️ Reset Completo
                        </button>
                    </div>
                    
                    <div class="glass-container rounded-lg p-4">
                        <h4 class="text-lg font-semibold text-white mb-3">💡 Dicas para Otimizar Armazenamento</h4>
                        <div class="text-white/80 space-y-2 text-sm">
                            <p>• Comprima imagens antes do upload (use ferramentas online)</p>
                            <p>• Remova produtos antigos que não são mais oferecidos</p>
                            <p>• Exporte backups regularmente</p>
                            <p>• Use imagens com resolução adequada (não muito grandes)</p>
                            <p>• Limpe agendamentos antigos periodicamente</p>
                        </div>
                    </div>
                </div>
            `;
        }

        function cleanupOldImages() {
            let cleanedCount = 0;
            
            // Remove detail images from services older than 6 months
            const sixMonthsAgo = new Date();
            sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);
            
            services.forEach(service => {
                const serviceDate = service.createdAt ? new Date(service.createdAt) : new Date();
                
                if (serviceDate < sixMonthsAgo) {
                    if (service.detailImage1) {
                        delete service.detailImage1;
                        delete service.detailImage1Name;
                        delete service.detailImage1Size;
                        cleanedCount++;
                    }
                    if (service.detailImage2) {
                        delete service.detailImage2;
                        delete service.detailImage2Name;
                        delete service.detailImage2Size;
                        cleanedCount++;
                    }
                }
            });
            
            if (cleanedCount > 0) {
                saveAllDataToStorage();
                showNotification(`✅ ${cleanedCount} imagens antigas removidas!\n\nEspaço liberado com sucesso.`, 'success');
                setTimeout(() => showStorageCleanupOptions(), 2000);
            } else {
                showNotification('ℹ️ Nenhuma imagem antiga encontrada para remoção.', 'info');
            }
        }

        function cleanupOldAppointments() {
            let cleanedCount = 0;
            const oneYearAgo = new Date();
            oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);
            
            clientsDatabase.forEach(client => {
                if (client.appointments) {
                    const originalLength = client.appointments.length;
                    client.appointments = client.appointments.filter(apt => {
                        const aptDate = new Date(apt.date);
                        return aptDate >= oneYearAgo || apt.status !== 'Concluído';
                    });
                    cleanedCount += originalLength - client.appointments.length;
                }
            });
            
            if (cleanedCount > 0) {
                saveAllDataToStorage();
                showNotification(`✅ ${cleanedCount} agendamentos antigos removidos!\n\nEspaço liberado com sucesso.`, 'success');
                setTimeout(() => showStorageCleanupOptions(), 2000);
            } else {
                showNotification('ℹ️ Nenhum agendamento antigo encontrado para remoção.', 'info');
            }
        }

        function exportDataBackup() {
            try {
                const backupData = {
                    version: DATA_VERSION,
                    exportDate: new Date().toISOString(),
                    services: services,
                    clients: clientsDatabase.map(client => ({
                        ...client,
                        // Remove sensitive data from backup
                        cpf: client.cpf.replace(/\d(?=\d{4})/g, '*'),
                        phone: client.phone.replace(/\d(?=\d{4})/g, '*')
                    })),
                    statistics: {
                        totalServices: services.length,
                        totalClients: clientsDatabase.length,
                        totalImages: countTotalImages(),
                        storageUsed: calculateStorageUsage()
                    }
                };
                
                const dataStr = JSON.stringify(backupData, null, 2);
                const dataBlob = new Blob([dataStr], { type: 'application/json' });
                
                const link = document.createElement('a');
                link.href = URL.createObjectURL(dataBlob);
                link.download = `aline-menezes-backup-${new Date().toISOString().split('T')[0]}.json`;
                link.click();
                
                showNotification('✅ Backup exportado com sucesso!\n\n📁 Arquivo salvo na pasta de downloads.', 'success');
                
            } catch (error) {
                console.error('Erro ao exportar backup:', error);
                showNotification('❌ Erro ao exportar backup.', 'error');
            }
        }

        function resetAllData() {
            if (confirm('⚠️ ATENÇÃO: Esta ação irá apagar TODOS os dados salvos!\n\n• Todos os serviços personalizados\n• Todos os clientes\n• Todas as imagens\n• Todas as configurações\n\nEsta ação NÃO PODE ser desfeita.\n\nTem certeza que deseja continuar?')) {
                if (confirm('🚨 CONFIRMAÇÃO FINAL\n\nDigite "CONFIRMAR" para prosseguir com a exclusão completa dos dados.') && 
                    prompt('Digite "CONFIRMAR" para confirmar:') === 'CONFIRMAR') {
                    
                    // Clear all localStorage
                    Object.values(STORAGE_KEYS).forEach(key => {
                        localStorage.removeItem(key);
                    });
                    
                    // Reset to defaults
                    location.reload();
                    
                    showNotification('✅ Todos os dados foram removidos!\n\nPágina será recarregada...', 'success');
                }
            }
        }

        // Enhanced save functions with auto-save
        function saveServicesToStorage() {
            scheduleAutoSave();
            return saveAllDataToStorage();
        }

        function loadServicesFromStorage() {
            return loadAllDataFromStorage();
        }

        // Data integrity check
        function checkDataIntegrity() {
            try {
                const issues = [];
                
                // Check services
                services.forEach((service, index) => {
                    if (!service.id || !service.name || !service.price) {
                        issues.push(`Serviço ${index + 1}: dados incompletos`);
                    }
                });
                
                // Check clients
                clientsDatabase.forEach((client, index) => {
                    if (!client.name || !client.cpf || !client.phone) {
                        issues.push(`Cliente ${index + 1}: dados incompletos`);
                    }
                });
                
                if (issues.length > 0) {
                    console.warn('⚠️ Problemas de integridade encontrados:', issues);
                    return false;
                }
                
                console.log('✅ Integridade dos dados verificada');
                return true;
            } catch (error) {
                console.error('❌ Erro na verificação de integridade:', error);
                return false;
            }
        }

        // Background Management Functions
        function showBackgroundUpload() {
            if (!currentUser || userType !== 'professional') {
                showNotification('❌ Acesso negado. Faça login como profissional.', 'error');
                return;
            }
            
            const currentBackground = localStorage.getItem('catalogBackground');
            const hasCustomBackground = currentBackground && currentBackground !== 'default';
            
            document.getElementById('professionalContent').innerHTML = `
                <div class="glass-container rounded-lg p-6">
                    <h3 class="text-xl font-bold text-white mb-4">🖼️ Gerenciar Fundo do Catálogo</h3>
                    
                    ${hasCustomBackground ? `
                        <div class="mb-6">
                            <div class="glass-container rounded-xl p-6 border-l-4 border-green-400">
                                <h4 class="text-lg font-semibold text-white mb-3">✅ Fundo Atual</h4>
                                <div class="flex items-center gap-4">
                                    <div class="w-20 h-20 rounded-lg overflow-hidden border-2 border-white/30">
                                        <img src="${currentBackground}" alt="Fundo atual" class="w-full h-full object-cover">
                                    </div>
                                    <div class="text-white/80">
                                        <p><strong>Status:</strong> Fundo personalizado ativo</p>
                                        <p><strong>Salvo em:</strong> ${new Date(localStorage.getItem('catalogBackgroundDate') || Date.now()).toLocaleString('pt-BR')}</p>
                                        <p class="text-green-300 text-sm">🔒 Imagem salva permanentemente</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    ` : ''}
                    
                    <div class="mb-6">
                        <div class="glass-container rounded-xl p-6">
                            <h4 class="text-lg font-semibold text-white mb-3">📤 Upload de Nova Imagem de Fundo</h4>
                            <div class="space-y-4">
                                <div>
                                    <label class="block text-white font-semibold mb-2">Selecionar Imagem de Fundo:</label>
                                    <input type="file" id="backgroundUpload" accept="image/*" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                                    <p class="text-white/70 text-sm mt-2">Formatos aceitos: JPG, PNG, WebP. Tamanho recomendado: 1920x1080px</p>
                                </div>
                                <button onclick="uploadBackground()" class="btn-primary px-6 py-3 rounded-xl font-bold hover:scale-105 transition-all duration-300">
                                    🚀 ${hasCustomBackground ? 'Substituir Fundo Atual' : 'Aplicar Fundo no Catálogo'}
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-6">
                        <div class="glass-container rounded-xl p-6">
                            <h4 class="text-lg font-semibold text-white mb-3">🎨 Opções Rápidas</h4>
                            <div class="grid grid-cols-2 gap-4">
                                <button onclick="setDefaultBackground()" class="bg-gradient-to-r from-purple-500 to-pink-500 text-white px-4 py-3 rounded-lg font-semibold hover:scale-105 transition-all duration-300">
                                    🌈 Gradiente Padrão
                                </button>
                                <button onclick="removeBackground()" class="bg-gradient-to-r from-gray-600 to-gray-700 text-white px-4 py-3 rounded-lg font-semibold hover:scale-105 transition-all duration-300">
                                    🗑️ Remover Fundo
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="glass-container rounded-xl p-6">
                        <h4 class="text-lg font-semibold text-white mb-3">ℹ️ Informações</h4>
                        <div class="text-white/80 space-y-2">
                            <p>• A imagem será aplicada como fundo de toda a página do catálogo</p>
                            <p>• Para melhor resultado, use imagens com boa qualidade e resolução alta</p>
                            <p>• O sistema manterá uma sobreposição para garantir legibilidade do texto</p>
                            <p>• <strong>🔒 As imagens são salvas permanentemente até você alterá-las</strong></p>
                            <p>• As imagens ficam armazenadas localmente no seu navegador</p>
                        </div>
                    </div>
                </div>
            `;
        }

        function uploadBackground() {
            const fileInput = document.getElementById('backgroundUpload');
            const file = fileInput.files[0];
            
            if (!file) {
                showNotification('❌ Por favor, selecione uma imagem primeiro', 'error');
                return;
            }
            
            if (!file.type.startsWith('image/')) {
                showNotification('❌ Por favor, selecione apenas arquivos de imagem', 'error');
                return;
            }
            
            // Show loading
            showNotification('📤 Fazendo upload da imagem...', 'info');
            
            const reader = new FileReader();
            reader.onload = function(e) {
                const imageUrl = e.target.result;
                document.body.style.background = `url('${imageUrl}') center/cover fixed`;
                document.body.classList.add('has-custom-bg');
                
                // Save to localStorage with timestamp
                localStorage.setItem('catalogBackground', imageUrl);
                localStorage.setItem('catalogBackgroundDate', new Date().toISOString());
                localStorage.setItem('catalogBackgroundName', file.name);
                
                showNotification('✅ Fundo do catálogo atualizado e salvo permanentemente!', 'success');
                
                // Refresh the management page to show current background
                setTimeout(() => {
                    showBackgroundUpload();
                }, 1500);
            };
            
            reader.readAsDataURL(file);
        }

        function setDefaultBackground() {
            document.body.style.background = 'linear-gradient(135deg, #667eea 0%, #764ba2 25%, #f093fb 50%, #f5576c 75%, #4facfe 100%)';
            document.body.style.backgroundAttachment = 'fixed';
            document.body.style.backgroundSize = 'cover';
            document.body.classList.remove('has-custom-bg');
            
            localStorage.setItem('catalogBackground', 'default');
            localStorage.removeItem('catalogBackgroundDate');
            localStorage.removeItem('catalogBackgroundName');
            
            showNotification('✅ Fundo padrão restaurado!', 'success');
            
            setTimeout(() => {
                showBackgroundUpload();
            }, 1000);
        }

        function removeBackground() {
            document.body.style.background = '#f8fafc';
            document.body.classList.remove('has-custom-bg');
            
            localStorage.removeItem('catalogBackground');
            localStorage.removeItem('catalogBackgroundDate');
            localStorage.removeItem('catalogBackgroundName');
            
            showNotification('✅ Fundo removido com sucesso!', 'success');
            
            setTimeout(() => {
                showBackgroundUpload();
            }, 1000);
        }

        // Anamnesis Functions
        function showAnamnesis() {
            if (!currentUser || userType !== 'professional') {
                showNotification('❌ Acesso negado. Faça login como profissional.', 'error');
                return;
            }
            
            document.getElementById('professionalContent').innerHTML = `
                <div class="glass-container rounded-lg p-6">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-bold text-white">📋 Fichas de Anamnese</h3>
                        <button onclick="showNewAnamnesisForm()" class="btn-primary px-4 py-2 rounded-lg font-semibold hover:scale-105 transition-all duration-300">
                            ➕ Nova Anamnese
                        </button>
                    </div>
                    
                    <div class="space-y-4 max-h-96 overflow-y-auto">
                        ${clientsDatabase.length === 0 ? 
                            '<p class="text-white/70 text-center py-8">Nenhum cliente cadastrado</p>' :
                            clientsDatabase.map((client, index) => `
                                <div class="glass-container rounded-lg p-4">
                                    <div class="flex justify-between items-start">
                                        <div>
                                            <h4 class="font-semibold text-white">${client.name}</h4>
                                            <p class="text-white/70">📱 ${client.phone}</p>
                                            <p class="text-white/70">📄 ${client.cpf}</p>
                                            <p class="text-white/70">🎂 ${new Date(client.birthdate).toLocaleDateString('pt-BR')}</p>
                                            <p class="text-blue-300">📋 ${client.anamnesis ? 'Anamnese preenchida' : 'Anamnese pendente'}</p>
                                        </div>
                                        <div class="text-right space-y-2">
                                            ${client.anamnesis ? `
                                                <button onclick="viewAnamnesis(${index})" class="bg-blue-500 text-white px-3 py-1 rounded text-xs hover:bg-blue-600 transition-colors block">
                                                    👁️ Visualizar
                                                </button>
                                                <button onclick="editAnamnesis(${index})" class="bg-orange-500 text-white px-3 py-1 rounded text-xs hover:bg-orange-600 transition-colors block">
                                                    ✏️ Editar
                                                </button>
                                            ` : `
                                                <button onclick="createAnamnesis(${index})" class="bg-green-500 text-white px-3 py-1 rounded text-xs hover:bg-green-600 transition-colors block">
                                                    📝 Criar Anamnese
                                                </button>
                                            `}
                                        </div>
                                    </div>
                                </div>
                            `).join('')
                        }
                    </div>
                </div>
            `;
        }

        function showNewAnamnesisForm() {
            document.getElementById('professionalContent').innerHTML = `
                <div class="glass-container rounded-lg p-6">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-bold text-white">📝 Selecionar Cliente para Anamnese</h3>
                        <button onclick="showAnamnesis()" class="glass-container text-white px-4 py-2 rounded-lg font-semibold hover:bg-white/20 transition-colors">
                            ← Voltar
                        </button>
                    </div>
                    
                    <div class="mb-4">
                        <label class="block text-white font-semibold mb-2">Selecione o Cliente:</label>
                        <select id="clientSelectAnamnesis" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                            <option value="">Escolha um cliente...</option>
                            ${clientsDatabase.map((client, index) => `
                                <option value="${index}">${client.name} - ${client.phone}</option>
                            `).join('')}
                        </select>
                    </div>
                    
                    <button onclick="startAnamnesis()" class="btn-primary px-6 py-3 rounded-xl font-bold hover:scale-105 transition-all duration-300">
                        📋 Iniciar Anamnese
                    </button>
                </div>
            `;
        }

        function startAnamnesis() {
            const clientIndex = document.getElementById('clientSelectAnamnesis').value;
            if (!clientIndex && clientIndex !== '0') {
                showNotification('❌ Por favor, selecione um cliente', 'error');
                return;
            }
            createAnamnesis(parseInt(clientIndex));
        }

        function createAnamnesis(clientIndex) {
            const client = clientsDatabase[clientIndex];
            if (!client) return;
            
            document.getElementById('professionalContent').innerHTML = `
                <div class="glass-container rounded-lg p-6 max-h-[80vh] overflow-y-auto">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-bold text-white">📋 Ficha de Anamnese - ${client.name}</h3>
                        <button onclick="showAnamnesis()" class="glass-container text-white px-4 py-2 rounded-lg font-semibold hover:bg-white/20 transition-colors">
                            ← Voltar
                        </button>
                    </div>
                    
                    <form onsubmit="saveAnamnesis(event, ${clientIndex})" class="space-y-6">
                        <!-- Dados Pessoais -->
                        <div class="glass-container rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-4">👤 Dados Pessoais</h4>
                            <div class="grid md:grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-white font-semibold mb-2">Nome Completo</label>
                                    <input type="text" value="${client.name}" readonly class="form-input w-full rounded-lg px-4 py-3 bg-gray-200">
                                </div>
                                <div>
                                    <label class="block text-white font-semibold mb-2">Data de Nascimento</label>
                                    <input type="date" value="${client.birthdate}" readonly class="form-input w-full rounded-lg px-4 py-3 bg-gray-200">
                                </div>
                                <div>
                                    <label class="block text-white font-semibold mb-2">Telefone</label>
                                    <input type="text" value="${client.phone}" readonly class="form-input w-full rounded-lg px-4 py-3 bg-gray-200">
                                </div>
                                <div>
                                    <label class="block text-white font-semibold mb-2">Profissão</label>
                                    <input type="text" id="profession" value="${client.anamnesis?.profession || ''}" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                                </div>
                            </div>
                        </div>

                        <!-- Histórico de Saúde -->
                        <div class="glass-container rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-4">🏥 Histórico de Saúde</h4>
                            <div class="space-y-4">
                                <div>
                                    <label class="block text-white font-semibold mb-2">Possui alguma alergia?</label>
                                    <div class="flex gap-4 mb-2">
                                        <label class="flex items-center text-white">
                                            <input type="radio" name="hasAllergy" value="sim" ${client.anamnesis?.hasAllergy === 'sim' ? 'checked' : ''} class="mr-2">
                                            Sim
                                        </label>
                                        <label class="flex items-center text-white">
                                            <input type="radio" name="hasAllergy" value="nao" ${client.anamnesis?.hasAllergy === 'nao' ? 'checked' : ''} class="mr-2">
                                            Não
                                        </label>
                                    </div>
                                    <textarea id="allergyDetails" placeholder="Se sim, descreva quais alergias..." rows="2" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">${client.anamnesis?.allergyDetails || ''}</textarea>
                                </div>

                                <div>
                                    <label class="block text-white font-semibold mb-2">Faz uso de medicamentos?</label>
                                    <div class="flex gap-4 mb-2">
                                        <label class="flex items-center text-white">
                                            <input type="radio" name="usesMedication" value="sim" ${client.anamnesis?.usesMedication === 'sim' ? 'checked' : ''} class="mr-2">
                                            Sim
                                        </label>
                                        <label class="flex items-center text-white">
                                            <input type="radio" name="usesMedication" value="nao" ${client.anamnesis?.usesMedication === 'nao' ? 'checked' : ''} class="mr-2">
                                            Não
                                        </label>
                                    </div>
                                    <textarea id="medicationDetails" placeholder="Se sim, quais medicamentos..." rows="2" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">${client.anamnesis?.medicationDetails || ''}</textarea>
                                </div>

                                <div>
                                    <label class="block text-white font-semibold mb-2">Possui alguma doença ou condição médica?</label>
                                    <textarea id="medicalConditions" placeholder="Descreva condições médicas relevantes..." rows="2" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">${client.anamnesis?.medicalConditions || ''}</textarea>
                                </div>
                            </div>
                        </div>

                        <!-- Histórico Estético -->
                        <div class="glass-container rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-4">💅 Histórico Estético</h4>
                            <div class="space-y-4">
                                <div>
                                    <label class="block text-white font-semibold mb-2">Já fez extensão de cílios antes?</label>
                                    <div class="flex gap-4 mb-2">
                                        <label class="flex items-center text-white">
                                            <input type="radio" name="previousLashes" value="sim" ${client.anamnesis?.previousLashes === 'sim' ? 'checked' : ''} class="mr-2">
                                            Sim
                                        </label>
                                        <label class="flex items-center text-white">
                                            <input type="radio" name="previousLashes" value="nao" ${client.anamnesis?.previousLashes === 'nao' ? 'checked' : ''} class="mr-2">
                                            Não
                                        </label>
                                    </div>
                                    <textarea id="lashHistory" placeholder="Quando foi a última vez? Como foi a experiência?" rows="2" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">${client.anamnesis?.lashHistory || ''}</textarea>
                                </div>

                                <div>
                                    <label class="block text-white font-semibold mb-2">Já fez micropigmentação?</label>
                                    <div class="flex gap-4 mb-2">
                                        <label class="flex items-center text-white">
                                            <input type="radio" name="previousMicropigmentation" value="sim" ${client.anamnesis?.previousMicropigmentation === 'sim' ? 'checked' : ''} class="mr-2">
                                            Sim
                                        </label>
                                        <label class="flex items-center text-white">
                                            <input type="radio" name="previousMicropigmentation" value="nao" ${client.anamnesis?.previousMicropigmentation === 'nao' ? 'checked' : ''} class="mr-2">
                                            Não
                                        </label>
                                    </div>
                                    <textarea id="micropigmentationHistory" placeholder="Onde? Quando? Resultado?" rows="2" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">${client.anamnesis?.micropigmentationHistory || ''}</textarea>
                                </div>

                                <div>
                                    <label class="block text-white font-semibold mb-2">Cuidados atuais com cílios/sobrancelhas</label>
                                    <textarea id="currentCare" placeholder="Produtos utilizados, rotina de cuidados..." rows="2" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">${client.anamnesis?.currentCare || ''}</textarea>
                                </div>
                            </div>
                        </div>

                        <!-- Expectativas -->
                        <div class="glass-container rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-4">✨ Expectativas e Objetivos</h4>
                            <div class="space-y-4">
                                <div>
                                    <label class="block text-white font-semibold mb-2">Qual resultado você espera?</label>
                                    <textarea id="expectations" placeholder="Descreva o resultado desejado..." rows="3" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">${client.anamnesis?.expectations || ''}</textarea>
                                </div>

                                <div>
                                    <label class="block text-white font-semibold mb-2">Estilo de vida (esportes, trabalho, etc.)</label>
                                    <textarea id="lifestyle" placeholder="Rotina diária, atividades físicas, trabalho..." rows="2" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">${client.anamnesis?.lifestyle || ''}</textarea>
                                </div>
                            </div>
                        </div>

                        <!-- Observações Profissionais -->
                        <div class="glass-container rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-4">📝 Observações Profissionais</h4>
                            <div class="space-y-4">
                                <div>
                                    <label class="block text-white font-semibold mb-2">Avaliação dos cílios naturais</label>
                                    <textarea id="lashAssessment" placeholder="Comprimento, curvatura, densidade, condição..." rows="2" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">${client.anamnesis?.lashAssessment || ''}</textarea>
                                </div>

                                <div>
                                    <label class="block text-white font-semibold mb-2">Formato do olho/sobrancelha</label>
                                    <textarea id="eyeShape" placeholder="Formato dos olhos, sobrancelhas, simetria..." rows="2" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">${client.anamnesis?.eyeShape || ''}</textarea>
                                </div>

                                <div>
                                    <label class="block text-white font-semibold mb-2">Recomendações e cuidados</label>
                                    <textarea id="recommendations" placeholder="Cuidados pós-procedimento, produtos recomendados..." rows="3" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">${client.anamnesis?.recommendations || ''}</textarea>
                                </div>

                                <div>
                                    <label class="block text-white font-semibold mb-2">Observações gerais</label>
                                    <textarea id="generalNotes" placeholder="Outras observações importantes..." rows="2" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">${client.anamnesis?.generalNotes || ''}</textarea>
                                </div>
                            </div>
                        </div>

                        <button type="submit" class="w-full btn-primary py-4 rounded-xl text-lg font-bold hover:scale-105 transition-all duration-300 shadow-lg">
                            💾 Salvar Ficha de Anamnese
                        </button>
                    </form>
                </div>
            `;
        }

        function saveAnamnesis(event, clientIndex) {
            event.preventDefault();
            
            const client = clientsDatabase[clientIndex];
            if (!client) return;
            
            const anamnesisData = {
                profession: document.getElementById('profession').value.trim(),
                hasAllergy: document.querySelector('input[name="hasAllergy"]:checked')?.value || '',
                allergyDetails: document.getElementById('allergyDetails').value.trim(),
                usesMedication: document.querySelector('input[name="usesMedication"]:checked')?.value || '',
                medicationDetails: document.getElementById('medicationDetails').value.trim(),
                medicalConditions: document.getElementById('medicalConditions').value.trim(),
                previousLashes: document.querySelector('input[name="previousLashes"]:checked')?.value || '',
                lashHistory: document.getElementById('lashHistory').value.trim(),
                previousMicropigmentation: document.querySelector('input[name="previousMicropigmentation"]:checked')?.value || '',
                micropigmentationHistory: document.getElementById('micropigmentationHistory').value.trim(),
                currentCare: document.getElementById('currentCare').value.trim(),
                expectations: document.getElementById('expectations').value.trim(),
                lifestyle: document.getElementById('lifestyle').value.trim(),
                lashAssessment: document.getElementById('lashAssessment').value.trim(),
                eyeShape: document.getElementById('eyeShape').value.trim(),
                recommendations: document.getElementById('recommendations').value.trim(),
                generalNotes: document.getElementById('generalNotes').value.trim(),
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            };
            
            client.anamnesis = anamnesisData;
            showAnamnesis();
            showNotification('✅ Ficha de anamnese salva com sucesso!', 'success');
        }

        function viewAnamnesis(clientIndex) {
            const client = clientsDatabase[clientIndex];
            if (!client || !client.anamnesis) return;
            
            const anamnesis = client.anamnesis;
            
            document.getElementById('professionalContent').innerHTML = `
                <div class="glass-container rounded-lg p-6 max-h-[80vh] overflow-y-auto">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-bold text-white">👁️ Visualizar Anamnese - ${client.name}</h3>
                        <div class="flex gap-2">
                            <button onclick="editAnamnesis(${clientIndex})" class="bg-orange-500 text-white px-4 py-2 rounded-lg font-semibold hover:bg-orange-600 transition-colors">
                                ✏️ Editar
                            </button>
                            <button onclick="showAnamnesis()" class="glass-container text-white px-4 py-2 rounded-lg font-semibold hover:bg-white/20 transition-colors">
                                ← Voltar
                            </button>
                        </div>
                    </div>
                    
                    <!-- Dados Pessoais -->
                    <div class="glass-container rounded-lg p-4 mb-4">
                        <h4 class="text-lg font-semibold text-white mb-4">👤 Dados Pessoais</h4>
                        <div class="grid md:grid-cols-2 gap-4 text-white/80">
                            <p><strong>Nome:</strong> ${client.name}</p>
                            <p><strong>Data de Nascimento:</strong> ${new Date(client.birthdate).toLocaleDateString('pt-BR')}</p>
                            <p><strong>Telefone:</strong> ${client.phone}</p>
                            <p><strong>Profissão:</strong> ${anamnesis.profession || 'Não informado'}</p>
                        </div>
                    </div>

                    <!-- Histórico de Saúde -->
                    <div class="glass-container rounded-lg p-4 mb-4">
                        <h4 class="text-lg font-semibold text-white mb-4">🏥 Histórico de Saúde</h4>
                        <div class="space-y-3 text-white/80">
                            <div>
                                <strong>Alergias:</strong> ${anamnesis.hasAllergy === 'sim' ? 'Sim' : 'Não'}
                                ${anamnesis.allergyDetails ? `<br><em>${anamnesis.allergyDetails}</em>` : ''}
                            </div>
                            <div>
                                <strong>Medicamentos:</strong> ${anamnesis.usesMedication === 'sim' ? 'Sim' : 'Não'}
                                ${anamnesis.medicationDetails ? `<br><em>${anamnesis.medicationDetails}</em>` : ''}
                            </div>
                            ${anamnesis.medicalConditions ? `
                                <div>
                                    <strong>Condições Médicas:</strong><br>
                                    <em>${anamnesis.medicalConditions}</em>
                                </div>
                            ` : ''}
                        </div>
                    </div>

                    <!-- Histórico Estético -->
                    <div class="glass-container rounded-lg p-4 mb-4">
                        <h4 class="text-lg font-semibold text-white mb-4">💅 Histórico Estético</h4>
                        <div class="space-y-3 text-white/80">
                            <div>
                                <strong>Extensão de Cílios Anterior:</strong> ${anamnesis.previousLashes === 'sim' ? 'Sim' : 'Não'}
                                ${anamnesis.lashHistory ? `<br><em>${anamnesis.lashHistory}</em>` : ''}
                            </div>
                            <div>
                                <strong>Micropigmentação Anterior:</strong> ${anamnesis.previousMicropigmentation === 'sim' ? 'Sim' : 'Não'}
                                ${anamnesis.micropigmentationHistory ? `<br><em>${anamnesis.micropigmentationHistory}</em>` : ''}
                            </div>
                            ${anamnesis.currentCare ? `
                                <div>
                                    <strong>Cuidados Atuais:</strong><br>
                                    <em>${anamnesis.currentCare}</em>
                                </div>
                            ` : ''}
                        </div>
                    </div>

                    <!-- Expectativas -->
                    <div class="glass-container rounded-lg p-4 mb-4">
                        <h4 class="text-lg font-semibold text-white mb-4">✨ Expectativas e Objetivos</h4>
                        <div class="space-y-3 text-white/80">
                            ${anamnesis.expectations ? `
                                <div>
                                    <strong>Expectativas:</strong><br>
                                    <em>${anamnesis.expectations}</em>
                                </div>
                            ` : ''}
                            ${anamnesis.lifestyle ? `
                                <div>
                                    <strong>Estilo de Vida:</strong><br>
                                    <em>${anamnesis.lifestyle}</em>
                                </div>
                            ` : ''}
                        </div>
                    </div>

                    <!-- Observações Profissionais -->
                    <div class="glass-container rounded-lg p-4 mb-4">
                        <h4 class="text-lg font-semibold text-white mb-4">📝 Observações Profissionais</h4>
                        <div class="space-y-3 text-white/80">
                            ${anamnesis.lashAssessment ? `
                                <div>
                                    <strong>Avaliação dos Cílios:</strong><br>
                                    <em>${anamnesis.lashAssessment}</em>
                                </div>
                            ` : ''}
                            ${anamnesis.eyeShape ? `
                                <div>
                                    <strong>Formato do Olho/Sobrancelha:</strong><br>
                                    <em>${anamnesis.eyeShape}</em>
                                </div>
                            ` : ''}
                            ${anamnesis.recommendations ? `
                                <div>
                                    <strong>Recomendações:</strong><br>
                                    <em>${anamnesis.recommendations}</em>
                                </div>
                            ` : ''}
                            ${anamnesis.generalNotes ? `
                                <div>
                                    <strong>Observações Gerais:</strong><br>
                                    <em>${anamnesis.generalNotes}</em>
                                </div>
                            ` : ''}
                        </div>
                    </div>

                    <div class="glass-container rounded-lg p-4 text-center">
                        <p class="text-white/60 text-sm">
                            Criado em: ${new Date(anamnesis.createdAt).toLocaleString('pt-BR')}
                            ${anamnesis.updatedAt !== anamnesis.createdAt ? `<br>Última atualização: ${new Date(anamnesis.updatedAt).toLocaleString('pt-BR')}` : ''}
                        </p>
                    </div>
                </div>
            `;
        }

        function editAnamnesis(clientIndex) {
            createAnamnesis(clientIndex);
        }

        // Professional Dashboard Functions Continued
        function showAgenda() {
            if (!currentUser || userType !== 'professional') {
                showNotification('❌ Acesso negado. Faça login como profissional.', 'error');
                return;
            }
            
            const today = new Date().toISOString().split('T')[0];
            const appointments = clientsDatabase.flatMap(client => 
                (client.appointments || []).map(apt => ({
                    ...apt,
                    clientName: client.name,
                    clientPhone: client.phone
                }))
            );
            
            document.getElementById('professionalContent').innerHTML = `
                <div class="glass-container rounded-lg p-6">
                    <h3 class="text-xl font-bold text-white mb-4">📅 Agenda do Dia</h3>
                    
                    <div class="mb-4">
                        <input type="date" id="agendaDate" value="${today}" onchange="filterAgendaByDate()" class="form-input rounded-lg px-4 py-2">
                    </div>
                    
                    <div id="agendaList" class="space-y-4">
                        ${appointments.length === 0 ? 
                            '<p class="text-white/70 text-center py-8">Nenhum agendamento encontrado</p>' :
                            appointments.map(apt => `
                                <div class="glass-container rounded-lg p-4">
                                    <div class="flex justify-between items-start">
                                        <div>
                                            <h4 class="font-semibold text-white">${apt.service}</h4>
                                            <p class="text-white/70">👤 ${apt.clientName}</p>
                                            <p class="text-white/70">📱 ${apt.clientPhone}</p>
                                            <p class="text-white/70">🕐 ${apt.time}</p>
                                            <p class="text-green-300 font-semibold">💰 R$ ${apt.price.toFixed(2).replace('.', ',')}</p>
                                        </div>
                                        <div class="text-right">
                                            <span class="px-3 py-1 rounded-full text-sm ${apt.status === 'Concluído' ? 'bg-green-500/20 text-green-300' : 'bg-blue-500/20 text-blue-300'}">${apt.status}</span>
                                            ${apt.status !== 'Concluído' ? `
                                                <button onclick="markAsCompleted(${apt.id})" class="block mt-2 bg-green-500 text-white px-3 py-1 rounded text-xs hover:bg-green-600 transition-colors">
                                                    ✅ Concluir
                                                </button>
                                            ` : ''}
                                        </div>
                                    </div>
                                </div>
                            `).join('')
                        }
                    </div>
                </div>
            `;
        }

        function showClients() {
            if (!currentUser || userType !== 'professional') {
                showNotification('❌ Acesso negado. Faça login como profissional.', 'error');
                return;
            }
            
            document.getElementById('professionalContent').innerHTML = `
                <div class="glass-container rounded-lg p-6">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-bold text-white">👥 Gerenciar Clientes</h3>
                        <button onclick="showAddClientForm()" class="btn-primary px-4 py-2 rounded-lg font-semibold hover:scale-105 transition-all duration-300">
                            ➕ Adicionar Cliente
                        </button>
                    </div>
                    
                    <div class="space-y-4 max-h-96 overflow-y-auto">
                        ${clientsDatabase.length === 0 ? 
                            '<p class="text-white/70 text-center py-8">Nenhum cliente cadastrado</p>' :
                            clientsDatabase.map((client, index) => `
                                <div class="glass-container rounded-lg p-4">
                                    <div class="flex justify-between items-start">
                                        <div>
                                            <h4 class="font-semibold text-white">${client.name}</h4>
                                            <p class="text-white/70">📱 ${client.phone}</p>
                                            <p class="text-white/70">📄 ${client.cpf}</p>
                                            <p class="text-white/70">🎂 ${new Date(client.birthdate).toLocaleDateString('pt-BR')}</p>
                                            ${client.email ? `<p class="text-white/70">📧 ${client.email}</p>` : ''}
                                            <p class="text-blue-300">📊 ${(client.appointments || []).length} agendamento(s)</p>
                                        </div>
                                        <div class="text-right space-y-2">
                                            <div class="flex gap-2">
                                                <button onclick="contactClient('${client.phone}')" class="bg-green-500 text-white px-3 py-1 rounded text-xs hover:bg-green-600 transition-colors">
                                                    💬 WhatsApp
                                                </button>
                                                <button onclick="viewClientHistory('${client.cpf}')" class="bg-blue-500 text-white px-3 py-1 rounded text-xs hover:bg-blue-600 transition-colors">
                                                    📋 Histórico
                                                </button>
                                                ${client.anamnesis ? `
                                                    <button onclick="viewAnamnesis(${index})" class="bg-teal-500 text-white px-3 py-1 rounded text-xs hover:bg-teal-600 transition-colors">
                                                        👁️ Anamnese
                                                    </button>
                                                ` : `
                                                    <button onclick="createAnamnesis(${index})" class="bg-purple-500 text-white px-3 py-1 rounded text-xs hover:bg-purple-600 transition-colors">
                                                        📝 Anamnese
                                                    </button>
                                                `}
                                            </div>
                                            <div class="flex gap-2">
                                                <button onclick="editClient(${index})" class="bg-orange-500 text-white px-3 py-1 rounded text-xs hover:bg-orange-600 transition-colors">
                                                    ✏️ Editar
                                                </button>
                                                <button onclick="deleteClient(${index})" class="bg-red-500 text-white px-3 py-1 rounded text-xs hover:bg-red-600 transition-colors">
                                                    🗑️ Excluir
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            `).join('')
                        }
                    </div>
                </div>
            `;
        }

        function showAddClientForm() {
            document.getElementById('professionalContent').innerHTML = `
                <div class="glass-container rounded-lg p-6">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-bold text-white">➕ Adicionar Novo Cliente</h3>
                        <button onclick="showClients()" class="glass-container text-white px-4 py-2 rounded-lg font-semibold hover:bg-white/20 transition-colors">
                            ← Voltar
                        </button>
                    </div>
                    
                    <form onsubmit="addClient(event)" class="space-y-4">
                        <div class="grid md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-white font-semibold mb-2">Nome Completo *</label>
                                <input type="text" id="addClientName" required class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                            </div>
                            
                            <div>
                                <label class="block text-white font-semibold mb-2">Data de Nascimento *</label>
                                <input type="date" id="addClientBirthdate" required class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                            </div>
                        </div>
                        
                        <div class="grid md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-white font-semibold mb-2">CPF *</label>
                                <input type="text" id="addClientCPF" required placeholder="000.000.000-00" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                            </div>
                            
                            <div>
                                <label class="block text-white font-semibold mb-2">WhatsApp *</label>
                                <input type="tel" id="addClientPhone" required placeholder="(00) 00000-0000" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                            </div>
                        </div>

                        <div>
                            <label class="block text-white font-semibold mb-2">Email</label>
                            <input type="email" id="addClientEmail" placeholder="cliente@email.com" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                        </div>
                        
                        <button type="submit" class="w-full btn-primary py-4 rounded-xl text-lg font-bold hover:scale-105 transition-all duration-300 shadow-lg">
                            ✨ Cadastrar Cliente
                        </button>
                    </form>
                </div>
            `;
        }

        function addClient(event) {
            event.preventDefault();
            
            const name = document.getElementById('addClientName').value.trim();
            const birthdate = document.getElementById('addClientBirthdate').value;
            const cpf = document.getElementById('addClientCPF').value.trim();
            const phone = document.getElementById('addClientPhone').value.trim();
            const email = document.getElementById('addClientEmail').value.trim();
            
            if (!name || !birthdate || !cpf || !phone) {
                showNotification('❌ Por favor, preencha todos os campos obrigatórios', 'error');
                return;
            }
            
            // Check if client already exists
            const existingClient = clientsDatabase.find(c => 
                c.cpf.replace(/\D/g, '') === cpf.replace(/\D/g, '') ||
                c.phone.replace(/\D/g, '') === phone.replace(/\D/g, '')
            );
            
            if (existingClient) {
                showNotification('❌ Cliente já cadastrado com este CPF ou telefone', 'error');
                return;
            }
            
            const newClient = {
                name: name,
                birthdate: birthdate,
                cpf: cpf,
                phone: phone,
                email: email || null,
                appointments: []
            };
            
            clientsDatabase.push(newClient);
            showClients();
            showNotification('✅ Cliente cadastrado com sucesso!', 'success');
        }

        function editClient(clientIndex) {
            const client = clientsDatabase[clientIndex];
            if (!client) return;
            
            document.getElementById('professionalContent').innerHTML = `
                <div class="glass-container rounded-lg p-6">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-bold text-white">✏️ Editar Cliente</h3>
                        <button onclick="showClients()" class="glass-container text-white px-4 py-2 rounded-lg font-semibold hover:bg-white/20 transition-colors">
                            ← Voltar
                        </button>
                    </div>
                    
                    <form onsubmit="updateClient(event, ${clientIndex})" class="space-y-4">
                        <div class="grid md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-white font-semibold mb-2">Nome Completo *</label>
                                <input type="text" id="editClientName" required value="${client.name}" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                            </div>
                            
                            <div>
                                <label class="block text-white font-semibold mb-2">Data de Nascimento *</label>
                                <input type="date" id="editClientBirthdate" required value="${client.birthdate}" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                            </div>
                        </div>
                        
                        <div class="grid md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-white font-semibold mb-2">CPF *</label>
                                <input type="text" id="editClientCPF" required value="${client.cpf}" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                            </div>
                            
                            <div>
                                <label class="block text-white font-semibold mb-2">WhatsApp *</label>
                                <input type="tel" id="editClientPhone" required value="${client.phone}" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                            </div>
                        </div>

                        <div>
                            <label class="block text-white font-semibold mb-2">Email</label>
                            <input type="email" id="editClientEmail" value="${client.email || ''}" class="form-input w-full rounded-lg px-4 py-3 focus:outline-none">
                        </div>
                        
                        <div class="glass-container rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-2">📊 Informações Adicionais</h4>
                            <p class="text-white/70">Agendamentos: ${(client.appointments || []).length}</p>
                            <p class="text-white/70">Cliente desde: ${new Date(client.birthdate).toLocaleDateString('pt-BR')}</p>
                        </div>
                        
                        <button type="submit" class="w-full btn-primary py-4 rounded-xl text-lg font-bold hover:scale-105 transition-all duration-300 shadow-lg">
                            ✨ Salvar Alterações
                        </button>
                    </form>
                </div>
            `;
        }

        function updateClient(event, clientIndex) {
            event.preventDefault();
            
            const name = document.getElementById('editClientName').value.trim();
            const birthdate = document.getElementById('editClientBirthdate').value;
            const cpf = document.getElementById('editClientCPF').value.trim();
            const phone = document.getElementById('editClientPhone').value.trim();
            const email = document.getElementById('editClientEmail').value.trim();
            
            if (!name || !birthdate || !cpf || !phone) {
                showNotification('❌ Por favor, preencha todos os campos obrigatórios', 'error');
                return;
            }
            
            // Check if CPF or phone already exists in other clients
            const existingClient = clientsDatabase.find((c, index) => 
                index !== clientIndex && (
                    c.cpf.replace(/\D/g, '') === cpf.replace(/\D/g, '') ||
                    c.phone.replace(/\D/g, '') === phone.replace(/\D/g, '')
                )
            );
            
            if (existingClient) {
                showNotification('❌ CPF ou telefone já cadastrado para outro cliente', 'error');
                return;
            }
            
            clientsDatabase[clientIndex].name = name;
            clientsDatabase[clientIndex].birthdate = birthdate;
            clientsDatabase[clientIndex].cpf = cpf;
            clientsDatabase[clientIndex].phone = phone;
            clientsDatabase[clientIndex].email = email || null;
            
            showClients();
            showNotification('✅ Cliente atualizado com sucesso!', 'success');
        }

        function deleteClient(clientIndex) {
            const client = clientsDatabase[clientIndex];
            if (!client) return;
            
            const appointmentsCount = (client.appointments || []).length;
            const confirmMessage = appointmentsCount > 0 
                ? `Tem certeza que deseja excluir o cliente "${client.name}"?\n\nEste cliente possui ${appointmentsCount} agendamento(s) que também serão perdidos.\n\nEsta ação não pode ser desfeita.`
                : `Tem certeza que deseja excluir o cliente "${client.name}"?\n\nEsta ação não pode ser desfeita.`;
            
            if (confirm(confirmMessage)) {
                clientsDatabase.splice(clientIndex, 1);
                showClients();
                showNotification('✅ Cliente excluído com sucesso!', 'success');
            }
        }

        function viewClientHistory(clientCpf) {
            const client = clientsDatabase.find(c => c.cpf === clientCpf);
            if (!client) {
                showNotification('❌ Cliente não encontrado', 'error');
                return;
            }
            
            const appointments = client.appointments || [];
            
            document.getElementById('professionalContent').innerHTML = `
                <div class="glass-container rounded-lg p-6">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-bold text-white">📋 Histórico - ${client.name}</h3>
                        <button onclick="showClients()" class="glass-container text-white px-4 py-2 rounded-lg font-semibold hover:bg-white/20 transition-colors">
                            ← Voltar
                        </button>
                    </div>
                    
                    <div class="glass-container rounded-lg p-4 mb-6">
                        <h4 class="text-lg font-semibold text-white mb-3">👤 Informações do Cliente</h4>
                        <div class="grid md:grid-cols-2 gap-4 text-white/80">
                            <div>
                                <p><strong>Nome:</strong> ${client.name}</p>
                                <p><strong>CPF:</strong> ${client.cpf}</p>
                                <p><strong>WhatsApp:</strong> ${client.phone}</p>
                            </div>
                            <div>
                                <p><strong>Email:</strong> ${client.email || 'Não informado'}</p>
                                <p><strong>Nascimento:</strong> ${new Date(client.birthdate).toLocaleDateString('pt-BR')}</p>
                                <p><strong>Total de Agendamentos:</strong> ${appointments.length}</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="space-y-4 max-h-96 overflow-y-auto">
                        <h4 class="text-lg font-semibold text-white">📅 Histórico de Agendamentos</h4>
                        ${appointments.length === 0 ? 
                            '<p class="text-white/70 text-center py-8">Nenhum agendamento encontrado</p>' :
                            appointments.map(apt => `
                                <div class="glass-container rounded-lg p-4">
                                    <div class="flex justify-between items-start">
                                        <div>
                                            <h5 class="font-semibold text-white">${apt.service}</h5>
                                            <p class="text-white/70">📅 ${new Date(apt.date).toLocaleDateString('pt-BR')} às ${apt.time}</p>
                                            <p class="text-white/70">👩‍💼 ${apt.professional}</p>
                                            <p class="text-green-300 font-semibold">💰 R$ ${apt.price.toFixed(2).replace('.', ',')}</p>
                                            ${apt.payment ? `<p class="text-white/70">💳 ${apt.payment}</p>` : ''}
                                            ${apt.notes ? `<p class="text-blue-300 text-sm">📝 ${apt.notes}</p>` : ''}
                                        </div>
                                        <span class="px-3 py-1 rounded-full text-sm ${apt.status === 'Concluído' ? 'bg-green-500/20 text-green-300' : 'bg-blue-500/20 text-blue-300'}">${apt.status}</span>
                                    </div>
                                </div>
                            `).join('')
                        }
                    </div>
                </div>
            `;
        }

        function showReports() {
            if (!currentUser || userType !== 'professional') {
                showNotification('❌ Acesso negado. Faça login como profissional.', 'error');
                return;
            }
            
            const allAppointments = clientsDatabase.flatMap(client => client.appointments || []);
            const completedAppointments = allAppointments.filter(apt => apt.status === 'Concluído');
            const totalRevenue = completedAppointments.reduce((sum, apt) => sum + apt.price, 0);
            const thisMonth = new Date().getMonth();
            const thisYear = new Date().getFullYear();
            const monthlyAppointments = completedAppointments.filter(apt => {
                const aptDate = new Date(apt.date);
                return aptDate.getMonth() === thisMonth && aptDate.getFullYear() === thisYear;
            });
            const monthlyRevenue = monthlyAppointments.reduce((sum, apt) => sum + apt.price, 0);
            
            document.getElementById('professionalContent').innerHTML = `
                <div class="glass-container rounded-lg p-6">
                    <h3 class="text-xl font-bold text-white mb-6">📊 Relatórios e Estatísticas</h3>
                    
                    <div class="grid md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                        <div class="glass-container rounded-lg p-4 text-center">
                            <div class="text-2xl font-bold text-green-400">${clientsDatabase.length}</div>
                            <div class="text-white/70 text-sm">Clientes Cadastrados</div>
                        </div>
                        
                        <div class="glass-container rounded-lg p-4 text-center">
                            <div class="text-2xl font-bold text-blue-400">${allAppointments.length}</div>
                            <div class="text-white/70 text-sm">Total de Agendamentos</div>
                        </div>
                        
                        <div class="glass-container rounded-lg p-4 text-center">
                            <div class="text-2xl font-bold text-purple-400">${completedAppointments.length}</div>
                            <div class="text-white/70 text-sm">Atendimentos Concluídos</div>
                        </div>
                        
                        <div class="glass-container rounded-lg p-4 text-center">
                            <div class="text-2xl font-bold text-yellow-400">R$ ${totalRevenue.toFixed(2).replace('.', ',')}</div>
                            <div class="text-white/70 text-sm">Receita Total</div>
                        </div>
                    </div>
                    
                    <div class="grid md:grid-cols-2 gap-6">
                        <div class="glass-container rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">📈 Este Mês</h4>
                            <div class="space-y-2">
                                <div class="flex justify-between">
                                    <span class="text-white/70">Agendamentos:</span>
                                    <span class="text-white font-semibold">${monthlyAppointments.length}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-white/70">Receita:</span>
                                    <span class="text-green-400 font-semibold">R$ ${monthlyRevenue.toFixed(2).replace('.', ',')}</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="glass-container rounded-lg p-4">
                            <h4 class="text-lg font-semibold text-white mb-3">🏆 Serviços Mais Populares</h4>
                            <div class="space-y-2">
                                ${getTopServices(completedAppointments).map(service => `
                                    <div class="flex justify-between">
                                        <span class="text-white/70">${service.name}:</span>
                                        <span class="text-white font-semibold">${service.count}x</span>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        function getTopServices(appointments) {
            const serviceCount = {};
            appointments.forEach(apt => {
                serviceCount[apt.service] = (serviceCount[apt.service] || 0) + 1;
            });
            
            return Object.entries(serviceCount)
                .map(([name, count]) => ({ name, count }))
                .sort((a, b) => b.count - a.count)
                .slice(0, 5);
        }

        // Booking Modal Functions da Versão 165
        function showBookingModal() {
            const modal = document.getElementById('bookingModal');
            modal.classList.add('active');
            
            // Reset form
            document.getElementById('bookingStep1').classList.remove('hidden');
            document.getElementById('bookingStep2').classList.add('hidden');
            
            // Populate service select
            const serviceSelect = document.getElementById('serviceSelect');
            serviceSelect.innerHTML = '<option value="">Escolha um serviço...</option>' + 
                services.map(service => `<option value="${service.id}">${service.name} - R$ ${service.price.toFixed(2).replace('.', ',')}</option>`).join('');
            
            // Set minimum date to today
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('appointmentDate').min = today;
            document.getElementById('appointmentDate').value = today;
            
            // Load available slots for today by default
            setTimeout(() => {
                loadAvailableSlots();
            }, 500);
        }

        function closeBookingModal() {
            document.getElementById('bookingModal').classList.remove('active');
        }

        function handleClientForm(event) {
            event.preventDefault();
            
            const name = document.getElementById('clientName').value.trim();
            const birthdate = document.getElementById('clientBirthdate').value;
            const cpf = document.getElementById('clientCPF').value.trim();
            const phone = document.getElementById('clientPhone').value.trim();
            
            if (!name || !birthdate || !cpf || !phone) {
                showNotification('❌ Por favor, preencha todos os campos obrigatórios', 'error');
                return;
            }
            
            // Check if client already exists
            let existingClient = clientsDatabase.find(c => 
                c.cpf.replace(/\D/g, '') === cpf.replace(/\D/g, '') ||
                c.phone.replace(/\D/g, '') === phone.replace(/\D/g, '')
            );
            
            if (!existingClient) {
                isFirstTimeClient = true;
                existingClient = {
                    name: name,
                    birthdate: birthdate,
                    cpf: cpf,
                    phone: phone,
                    appointments: []
                };
                clientsDatabase.push(existingClient);
                showNotification('🎉 Cadastro realizado! Você ganhou 10% de desconto!', 'success');
            } else {
                isFirstTimeClient = false;
                showNotification('✅ Cliente encontrado! Continuando para agendamento...', 'info');
            }
            
            clientData = existingClient;
            
            // Move to step 2
            document.getElementById('bookingStep1').classList.add('hidden');
            document.getElementById('bookingStep2').classList.remove('hidden');
        }

        function backToStep1() {
            document.getElementById('bookingStep1').classList.remove('hidden');
            document.getElementById('bookingStep2').classList.add('hidden');
        }

        // Google Calendar Integration Functions
        async function loadAvailableSlots() {
            const selectedDate = document.getElementById('appointmentDate').value;
            if (!selectedDate) return;
            
            // Show loading
            document.getElementById('loadingSlots').classList.remove('hidden');
            document.getElementById('availableSlots').classList.add('hidden');
            document.getElementById('noSlotsMessage').classList.add('hidden');
            
            try {
                // Gerar slots e verificar disponibilidade com Google Calendar
                const slots = await generateTimeSlots(selectedDate);
                displayAvailableSlots(slots, selectedDate);
            } catch (error) {
                console.error('Erro ao carregar horários:', error);
                showNotification('⚠️ Erro ao carregar horários. Usando dados locais.', 'warning');
                
                // Fallback para dados locais
                const slots = await generateTimeSlotsLocal(selectedDate);
                displayAvailableSlots(slots, selectedDate);
            }
        }
        
        async function generateTimeSlots(date) {
            const selectedDate = new Date(date);
            const dayOfWeek = selectedDate.getDay();
            
            // Check if it's a day off
            if (GOOGLE_CALENDAR_CONFIG.businessHours.daysOff.includes(dayOfWeek)) {
                return [];
            }
            
            // Check if it's in the past
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            if (selectedDate < today) {
                return [];
            }
            
            const slots = [];
            const startTime = GOOGLE_CALENDAR_CONFIG.businessHours.start;
            const endTime = GOOGLE_CALENDAR_CONFIG.businessHours.end;
            const interval = GOOGLE_CALENDAR_CONFIG.businessHours.interval;
            const lunch = GOOGLE_CALENDAR_CONFIG.businessHours.lunch;
            
            let currentTime = timeToMinutes(startTime);
            const endMinutes = timeToMinutes(endTime);
            const lunchStart = timeToMinutes(lunch.start);
            const lunchEnd = timeToMinutes(lunch.end);
            
            while (currentTime < endMinutes) {
                const timeString = minutesToTime(currentTime);
                
                // Skip lunch time
                if (currentTime >= lunchStart && currentTime < lunchEnd) {
                    currentTime += 30;
                    continue;
                }
                
                // Check if slot is busy (from Google Calendar or local appointments)
                const isBusy = await isSlotBusy(date, timeString);
                
                // If it's today, check if time has passed
                const isToday = selectedDate.toDateString() === today.toDateString();
                const isPast = isToday && currentTime < getCurrentTimeInMinutes();
                
                slots.push({
                    time: timeString,
                    available: !isBusy && !isPast,
                    reason: isBusy ? 'Ocupado' : isPast ? 'Horário passou' : null
                });
                
                currentTime += interval;
            }
            
            return slots;
        }

        // Função de fallback para dados locais
        function generateTimeSlotsLocal(date) {
            const selectedDate = new Date(date);
            const dayOfWeek = selectedDate.getDay();
            
            if (GOOGLE_CALENDAR_CONFIG.businessHours.daysOff.includes(dayOfWeek)) {
                return [];
            }
            
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            if (selectedDate < today) {
                return [];
            }
            
            const slots = [];
            const startTime = GOOGLE_CALENDAR_CONFIG.businessHours.start;
            const endTime = GOOGLE_CALENDAR_CONFIG.businessHours.end;
            const interval = GOOGLE_CALENDAR_CONFIG.businessHours.interval;
            const lunch = GOOGLE_CALENDAR_CONFIG.businessHours.lunch;
            
            let currentTime = timeToMinutes(startTime);
            const endMinutes = timeToMinutes(endTime);
            const lunchStart = timeToMinutes(lunch.start);
            const lunchEnd = timeToMinutes(lunch.end);
            
            while (currentTime < endMinutes) {
                const timeString = minutesToTime(currentTime);
                
                if (currentTime >= lunchStart && currentTime < lunchEnd) {
                    currentTime += 30;
                    continue;
                }
                
                // Verificação apenas local (sem Google Calendar)
                const busySlots = simulatedBusySlots[date] || [];
                const isBusy = busySlots.includes(timeString);
                
                const isToday = selectedDate.toDateString() === today.toDateString();
                const isPast = isToday && currentTime < getCurrentTimeInMinutes();
                
                slots.push({
                    time: timeString,
                    available: !isBusy && !isPast,
                    reason: isBusy ? 'Ocupado' : isPast ? 'Horário passou' : null
                });
                
                currentTime += interval;
            }
            
            return slots;
        }
        
        async function isSlotBusy(date, time) {
            // Verificar eventos do Google Calendar (com privacidade)
            try {
                if (GOOGLE_CALENDAR_CONFIG.apiKey && GOOGLE_CALENDAR_CONFIG.apiKey !== 'YOUR_GOOGLE_CALENDAR_API_KEY') {
                    const startDateTime = `${date}T${time}:00`;
                    const endDateTime = `${date}T${addMinutesToTime(time, GOOGLE_CALENDAR_CONFIG.businessHours.interval)}:00`;
                    
                    const response = await fetch(`https://www.googleapis.com/calendar/v3/calendars/${encodeURIComponent(GOOGLE_CALENDAR_CONFIG.calendarId)}/events?` +
                        `key=${GOOGLE_CALENDAR_CONFIG.apiKey}&` +
                        `timeMin=${startDateTime}&` +
                        `timeMax=${endDateTime}&` +
                        `singleEvents=true&` +
                        `orderBy=startTime`, {
                        headers: {
                            'Authorization': `Bearer ${getAccessToken()}`
                        }
                    });

                    if (response.ok) {
                        const data = await response.json();
                        const hasEvents = data.items && data.items.length > 0;
                        
                        // Para clientes: apenas retorna se está ocupado (sem detalhes)
                        // Para admin: pode acessar detalhes completos
                        if (hasEvents && userType !== 'professional') {
                            console.log(`🔒 Horário ${time} ocupado (detalhes privados)`);
                        } else if (hasEvents && userType === 'professional') {
                            console.log(`📅 Admin view - Eventos encontrados:`, data.items);
                        }
                        
                        return hasEvents;
                    }
                }
            } catch (error) {
                console.error('Erro ao verificar Google Calendar:', error);
            }
            
            // Fallback: verificar slots simulados e agendamentos locais
            const busySlots = simulatedBusySlots[date] || [];
            if (busySlots.includes(time)) return true;
            
            // Check local appointments
            const appointments = clientsDatabase.flatMap(client => client.appointments || []);
            return appointments.some(apt => apt.date === date && apt.time === time && apt.status !== 'Cancelado');
        }
        
        function displayAvailableSlots(slots, date) {
            document.getElementById('loadingSlots').classList.add('hidden');
            
            if (slots.length === 0) {
                document.getElementById('noSlotsMessage').classList.remove('hidden');
                return;
            }
            
            const availableSlots = slots.filter(slot => slot.available);
            if (availableSlots.length === 0) {
                document.getElementById('noSlotsMessage').classList.remove('hidden');
                return;
            }
            
            const slotsGrid = document.getElementById('slotsGrid');
            slotsGrid.innerHTML = slots.map(slot => {
                const buttonClass = slot.available 
                    ? 'bg-green-500/20 border-green-400 text-green-300 hover:bg-green-500/30 cursor-pointer'
                    : 'bg-red-500/20 border-red-400 text-red-300 cursor-not-allowed opacity-60';
                
                return `
                    <button type="button" 
                            onclick="${slot.available ? `selectTimeSlot('${slot.time}')` : ''}" 
                            class="time-slot ${buttonClass} border-2 rounded-lg py-3 px-2 text-sm font-semibold transition-all duration-300 ${slot.available ? 'hover:scale-105' : ''}"
                            ${!slot.available ? 'disabled' : ''}
                            title="${slot.reason || 'Disponível'}">
                        ${slot.time}
                        ${slot.available ? '<div class="text-xs mt-1">✅ Livre</div>' : '<div class="text-xs mt-1">🔴 Ocupado</div>'}
                    </button>
                `;
            }).join('');
            
            document.getElementById('availableSlots').classList.remove('hidden');
        }
        
        function selectTimeSlot(time) {
            selectedTimeSlot = time;
            
            // Update button styles
            document.querySelectorAll('.time-slot').forEach(btn => {
                btn.classList.remove('bg-pink-500', 'border-pink-400', 'text-white');
                if (btn.textContent.includes(time)) {
                    btn.classList.add('bg-pink-500', 'border-pink-400', 'text-white');
                    btn.innerHTML = `${time}<div class="text-xs mt-1">✅ Selecionado</div>`;
                } else if (!btn.disabled) {
                    btn.classList.add('bg-green-500/20', 'border-green-400', 'text-green-300');
                    const timeText = btn.textContent.split('\n')[0];
                    btn.innerHTML = `${timeText}<div class="text-xs mt-1">✅ Livre</div>`;
                }
            });
            
            showNotification(`⏰ Horário ${time} selecionado!`, 'info');
        }
        
        // Utility functions for time manipulation
        function timeToMinutes(timeString) {
            const [hours, minutes] = timeString.split(':').map(Number);
            return hours * 60 + minutes;
        }
        
        function minutesToTime(minutes) {
            const hours = Math.floor(minutes / 60);
            const mins = minutes % 60;
            return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;
        }
        
        function getCurrentTimeInMinutes() {
            const now = new Date();
            return now.getHours() * 60 + now.getMinutes();
        }
        
        // Google Calendar API Integration (Real Implementation)
        async function createGoogleCalendarEvent(appointmentData) {
            try {
                // Configuração do evento com privacidade
                const event = {
                    summary: `Agendamento - ${appointmentData.service}`,
                    description: `DADOS PRIVADOS (Visível apenas para admin):\n\nCliente: ${appointmentData.clientName}\nTelefone: ${appointmentData.clientPhone}\nServiço: ${appointmentData.service}\nValor: R$ ${appointmentData.price.toFixed(2).replace('.', ',')}\n\nAgendado via: Catálogo Online\nEmail da agenda: ${GOOGLE_CALENDAR_CONFIG.calendarId}`,
                    start: {
                        dateTime: `${appointmentData.date}T${appointmentData.time}:00`,
                        timeZone: GOOGLE_CALENDAR_CONFIG.timeZone
                    },
                    end: {
                        dateTime: `${appointmentData.date}T${addMinutesToTime(appointmentData.time, GOOGLE_CALENDAR_CONFIG.businessHours.interval)}:00`,
                        timeZone: GOOGLE_CALENDAR_CONFIG.timeZone
                    },
                    // Configurações de privacidade
                    visibility: 'private', // Evento privado
                    transparency: 'opaque', // Mostra como ocupado
                    attendees: [
                        { 
                            email: GOOGLE_CALENDAR_CONFIG.calendarId,
                            responseStatus: 'accepted',
                            organizer: true
                        }
                    ],
                    reminders: {
                        useDefault: false,
                        overrides: [
                            { method: 'email', minutes: 24 * 60 }, // 1 day before
                            { method: 'popup', minutes: 60 } // 1 hour before
                        ]
                    },
                    // Metadados para controle interno
                    extendedProperties: {
                        private: {
                            clientName: appointmentData.clientName,
                            clientPhone: appointmentData.clientPhone,
                            service: appointmentData.service,
                            price: appointmentData.price.toString(),
                            source: 'catalogo_online'
                        }
                    }
                };

                // Implementação real da API do Google Calendar
                if (GOOGLE_CALENDAR_CONFIG.apiKey && GOOGLE_CALENDAR_CONFIG.apiKey !== 'YOUR_GOOGLE_CALENDAR_API_KEY') {
                    const response = await fetch(`https://www.googleapis.com/calendar/v3/calendars/${encodeURIComponent(GOOGLE_CALENDAR_CONFIG.calendarId)}/events?key=${GOOGLE_CALENDAR_CONFIG.apiKey}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${getAccessToken()}` // Função para obter token OAuth
                        },
                        body: JSON.stringify(event)
                    });

                    if (response.ok) {
                        const createdEvent = await response.json();
                        console.log('✅ Evento criado no Google Calendar:', createdEvent.id);
                        return { success: true, eventId: createdEvent.id };
                    } else {
                        throw new Error(`Erro na API: ${response.status}`);
                    }
                } else {
                    // Simulação para demonstração
                    console.log('📅 Simulação - Evento criado no Google Calendar:', event);
                    console.log(`📧 Agenda vinculada: ${GOOGLE_CALENDAR_CONFIG.calendarId}`);
                    console.log('🔒 Privacidade: Detalhes visíveis apenas para admin');
                    return { success: true, eventId: 'simulated_event_id_' + Date.now() };
                }
            } catch (error) {
                console.error('❌ Erro ao criar evento no Google Calendar:', error);
                return { success: false, error: error.message };
            }
        }

        // Função para obter token de acesso OAuth (implementar conforme necessário)
        function getAccessToken() {
            // Esta função deve implementar o fluxo OAuth2 do Google
            // Por enquanto retorna um token simulado
            return 'simulated_access_token';
        }
        
        function addMinutesToTime(timeString, minutes) {
            const totalMinutes = timeToMinutes(timeString) + minutes;
            return minutesToTime(totalMinutes);
        }

        async function confirmBooking() {
            const serviceId = document.getElementById('serviceSelect').value;
            const appointmentDate = document.getElementById('appointmentDate').value;
            
            if (!serviceId || !appointmentDate || !selectedTimeSlot) {
                showNotification('❌ Por favor, selecione serviço, data e horário', 'error');
                return;
            }
            
            const service = services.find(s => s.id == serviceId);
            if (!service) {
                showNotification('❌ Serviço não encontrado', 'error');
                return;
            }
            
            // Verificar se o horário ainda está disponível
            if (isSlotBusy(appointmentDate, selectedTimeSlot)) {
                showNotification('❌ Este horário acabou de ser ocupado. Por favor, selecione outro horário.', 'error');
                loadAvailableSlots(); // Recarregar horários
                return;
            }
            
            const finalPrice = isFirstTimeClient ? service.price * 0.9 : service.price;
            
            const appointment = {
                id: Date.now(),
                date: appointmentDate,
                time: selectedTimeSlot,
                service: service.name,
                professional: 'Aline Menezes',
                price: finalPrice,
                payment: 'A definir',
                status: 'Agendado',
                notes: isFirstTimeClient ? 'Primeiro agendamento - 10% desconto aplicado' : '',
                googleEventId: null
            };
            
            // Mostrar loading
            const confirmButton = event.target;
            const originalText = confirmButton.innerHTML;
            confirmButton.innerHTML = '<div class="loading-spinner inline-block mr-2"></div>Criando agendamento...';
            confirmButton.disabled = true;
            
            try {
                // Criar evento no Google Calendar
                const calendarData = {
                    clientName: clientData.name,
                    clientPhone: clientData.phone,
                    clientEmail: clientData.email,
                    service: service.name,
                    date: appointmentDate,
                    time: selectedTimeSlot,
                    price: finalPrice
                };
                
                const calendarResult = await createGoogleCalendarEvent(calendarData);
                
                if (calendarResult.success) {
                    appointment.googleEventId = calendarResult.eventId;
                    
                    // Adicionar aos horários ocupados localmente
                    if (!simulatedBusySlots[appointmentDate]) {
                        simulatedBusySlots[appointmentDate] = [];
                    }
                    simulatedBusySlots[appointmentDate].push(selectedTimeSlot);
                    
                    clientData.appointments = clientData.appointments || [];
                    clientData.appointments.push(appointment);
                    
                    closeBookingModal();
                    
                    const discountText = isFirstTimeClient ? '\n🎁 Desconto de 10% aplicado!' : '';
                    const whatsappMessage = `🎉 *AGENDAMENTO CONFIRMADO!*\n\n` +
                        `👤 *Cliente:* ${clientData.name}\n` +
                        `💅 *Serviço:* ${service.name}\n` +
                        `📅 *Data:* ${new Date(appointmentDate).toLocaleDateString('pt-BR')}\n` +
                        `🕐 *Horário:* ${selectedTimeSlot}\n` +
                        `💰 *Valor:* R$ ${finalPrice.toFixed(2).replace('.', ',')}${discountText}\n\n` +
                        `📍 *Local:* Rua Manoel de Campos Sales, 461 - São Cristovão, Chapecó-SC\n\n` +
                        `📅 *Agenda:* Agendamento sincronizado com Google Calendar\n` +
                        `🔔 *Lembretes:* Você receberá lembretes automáticos\n\n` +
                        `✨ Agendamento realizado através do catálogo online!\n` +
                        `📱 Qualquer dúvida, entre em contato conosco.`;
                    
                    showNotification(`✅ Agendamento confirmado e sincronizado com Google Calendar!${discountText}\n\n📱 Enviando confirmação via WhatsApp...`, 'success');
                    
                    setTimeout(() => {
                        const whatsappUrl = `https://wa.me/5549998200000?text=${encodeURIComponent(whatsappMessage)}`;
                        window.open(whatsappUrl, '_blank', 'noopener,noreferrer');
                    }, 2000);
                    
                } else {
                    throw new Error('Falha ao criar evento no Google Calendar');
                }
                
            } catch (error) {
                console.error('Erro ao criar agendamento:', error);
                
                // Mesmo com erro no Google Calendar, criar agendamento local
                clientData.appointments = clientData.appointments || [];
                clientData.appointments.push(appointment);
                
                showNotification('⚠️ Agendamento criado localmente. Erro na sincronização com Google Calendar.\n\n📱 Enviando confirmação via WhatsApp...', 'warning');
                
                closeBookingModal();
                
                setTimeout(() => {
                    const whatsappMessage = `🎉 *AGENDAMENTO CONFIRMADO!*\n\n` +
                        `👤 *Cliente:* ${clientData.name}\n` +
                        `💅 *Serviço:* ${service.name}\n` +
                        `📅 *Data:* ${new Date(appointmentDate).toLocaleDateString('pt-BR')}\n` +
                        `🕐 *Horário:* ${selectedTimeSlot}\n` +
                        `💰 *Valor:* R$ ${finalPrice.toFixed(2).replace('.', ',')}\n\n` +
                        `📍 *Local:* Rua Manoel de Campos Sales, 461 - São Cristovão, Chapecó-SC\n\n` +
                        `✨ Agendamento realizado através do catálogo online!`;
                    
                    const whatsappUrl = `https://wa.me/5549998200000?text=${encodeURIComponent(whatsappMessage)}`;
                    window.open(whatsappUrl, '_blank', 'noopener,noreferrer');
                }, 2000);
                
            } finally {
                // Restaurar botão
                confirmButton.innerHTML = originalText;
                confirmButton.disabled = false;
            }
        }

        // Location Modal Functions da Versão 165
        function showLocationModal() {
            document.getElementById('locationModal').classList.add('active');
        }

        function closeLocationModal() {
            document.getElementById('locationModal').classList.remove('active');
        }

        function openGoogleMaps() {
            const address = "Rua Manoel de Campos Sales, 461, São Cristovão, Chapecó, SC";
            const url = `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(address)}`;
            window.open(url, '_blank', 'noopener,noreferrer');
        }

        function openUber() {
            const address = "Rua Manoel de Campos Sales, 461, São Cristovão, Chapecó, SC";
            const url = `https://m.uber.com/ul/?action=setPickup&pickup=my_location&dropoff[formatted_address]=${encodeURIComponent(address)}`;
            window.open(url, '_blank', 'noopener,noreferrer');
        }

        function open99() {
            const address = "Rua Manoel de Campos Sales, 461, São Cristovão, Chapecó, SC";
            const url = `https://99app.com/ride?destination=${encodeURIComponent(address)}`;
            window.open(url, '_blank', 'noopener,noreferrer');
        }

        // Welcome Popup Functions da Versão 165
        function showWelcomePopup() {
            document.getElementById('welcomePopup').classList.add('active');
        }

        function closeWelcomePopup() {
            document.getElementById('welcomePopup').classList.remove('active');
        }

        // Utility Functions da Versão 165
        function shareWhatsApp() {
            const message = `🌟 *ALINE MENEZES BEAUTY* 🌟\n\n` +
                `✨ Confira nosso catálogo online completo!\n\n` +
                `💅 Serviços disponíveis:\n` +
                `• Extensão de Cílios\n` +
                `• Design de Sobrancelhas\n` +
                `• Micropigmentação\n` +
                `• E muito mais!\n\n` +
                `📱 Agendamento online disponível\n` +
                `🎁 Desconto especial para novos clientes\n\n` +
                `📍 Rua Manoel de Campos Sales, 461\n` +
                `São Cristovão - Chapecó/SC\n\n` +
                `💬 WhatsApp: (49) 99820-0000\n` +
                `📸 Instagram: @alinemenezes.beauty`;
            
            const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(message)}`;
            window.open(whatsappUrl, '_blank', 'noopener,noreferrer');
        }

        function contactWhatsApp() {
            const message = `Olá! Vim através do catálogo online e gostaria de mais informações sobre os serviços.`;
            const whatsappUrl = `https://wa.me/5549998200000?text=${encodeURIComponent(message)}`;
            window.open(whatsappUrl, '_blank', 'noopener,noreferrer');
        }

        function contactClient(phone) {
            const cleanPhone = phone.replace(/\D/g, '');
            const message = `Olá! Este é um contato da Aline Menezes Beauty sobre seu agendamento.`;
            const whatsappUrl = `https://wa.me/55${cleanPhone}?text=${encodeURIComponent(message)}`;
            window.open(whatsappUrl, '_blank', 'noopener,noreferrer');
        }

        // Initialize Application with Enhanced Persistence
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Inicializando Aline Menezes Beauty - Catálogo Interativo...');
            
            // Check data integrity first
            const integrityCheck = checkDataIntegrity();
            if (!integrityCheck) {
                console.warn('⚠️ Problemas de integridade detectados - dados serão validados durante o carregamento');
            }
            
            // Load all saved data with enhanced system
            const dataLoaded = loadAllDataFromStorage();
            if (dataLoaded) {
                console.log('✅ Sistema de persistência completo carregado com sucesso');
            } else {
                console.log('⚠️ Usando configuração padrão - primeira execução ou erro no carregamento');
            }
            
            // Initialize services display
            renderServices();
            
            // Setup auto-save system
            console.log('⚡ Sistema de auto-save ativado - salvamento automático a cada 2 segundos após alterações');
            
            // Show welcome popup after 2 seconds
            setTimeout(showWelcomePopup, 2000);
            
            // Add input masks
            addInputMasks();
            
            // Setup periodic data integrity checks (every 5 minutes)
            setInterval(() => {
                checkDataIntegrity();
            }, 5 * 60 * 1000);
            
            // Setup storage monitoring
            const storageUsed = calculateStorageUsage();
            if (parseFloat(storageUsed.percentage) > 80) {
                console.warn(`⚠️ Armazenamento quase cheio: ${storageUsed.percentage}% usado`);
            }
            
            // Final initialization log
            console.log('🎉 SISTEMA COMPLETAMENTE INICIALIZADO!');
            console.log('📊 Status do Sistema:');
            console.log(`   • Produtos: ${services.length}`);
            console.log(`   • Clientes: ${clientsDatabase.length}`);
            console.log(`   • Imagens: ${countTotalImages()}`);
            console.log(`   • Armazenamento: ${storageUsed.used}MB (${storageUsed.percentage}%)`);
            console.log('📱 Todas as funcionalidades estão operacionais');
            console.log('💾 Sistema de persistência completo ativo');
            console.log('🔒 Dados e imagens salvos permanentemente até alteração manual');
            console.log('⚡ Auto-save ativo para todas as alterações');
            console.log('🧹 Ferramentas de limpeza disponíveis no painel profissional');
            console.log('📦 Sistema de backup e exportação disponível');
        });

        function addInputMasks() {
            // CPF mask
            document.addEventListener('input', function(e) {
                if (e.target.id && (e.target.id.includes('CPF') || e.target.id.includes('cpf'))) {
                    let value = e.target.value.replace(/\D/g, '');
                    value = value.replace(/(\d{3})(\d)/, '$1.$2');
                    value = value.replace(/(\d{3})(\d)/, '$1.$2');
                    value = value.replace(/(\d{3})(\d{1,2})$/, '$1-$2');
                    e.target.value = value;
                }
                
                // Phone mask
                if (e.target.id && (e.target.id.includes('Phone') || e.target.id.includes('phone'))) {
                    let value = e.target.value.replace(/\D/g, '');
                    value = value.replace(/(\d{2})(\d)/, '($1) $2');
                    value = value.replace(/(\d{5})(\d)/, '$1-$2');
                    e.target.value = value;
                }
            });
        }

        // Close modals when clicking outside
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('modal')) {
                e.target.classList.remove('active');
            }
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'9891a3af738df18b',t:'MTc1OTU0OTAzMy4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>

function closeWelcomePopup() {
    document.getElementById("welcomePopup").classList.remove("active");
}

window.onload = function() {
    document.getElementById("welcomePopup").classList.add("active");
};
